
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004a48  08004a48  00005a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab8  08004ab8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab8  08004ab8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004abc  08004abc  00005abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ac0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08004acc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004acc  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e773  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214d  00000000  00000000  000147a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000168f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  00017608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a124  00000000  00000000  00018051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101fe  00000000  00000000  00032175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098cd1  00000000  00000000  00042373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee4  00000000  00000000  000db088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000ddf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a30 	.word	0x08004a30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004a30 	.word	0x08004a30

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile bool is_tim16_period_elapsed = false;
volatile bool is_tim3_period_elapsed = false;
/* Update Event (ARR overflow) (UEV) */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM16) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d102      	bne.n	800025c <HAL_TIM_PeriodElapsedCallback+0x18>
		is_tim16_period_elapsed = true;
 8000256:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM3) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a06      	ldr	r2, [pc, #24]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d102      	bne.n	800026c <HAL_TIM_PeriodElapsedCallback+0x28>
		is_tim3_period_elapsed = true;
 8000266:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000268:	2201      	movs	r2, #1
 800026a:	701a      	strb	r2, [r3, #0]
	}

}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40014400 	.word	0x40014400
 8000278:	200001c8 	.word	0x200001c8
 800027c:	40000400 	.word	0x40000400
 8000280:	200001c9 	.word	0x200001c9

08000284 <turn_on_LD5>:

void turn_on_LD5(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	is_tim16_period_elapsed = false;
 8000288:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <turn_on_LD5+0x48>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim16);
 800028e:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <turn_on_LD5+0x4c>)
 8000290:	0018      	movs	r0, r3
 8000292:	f002 f867 	bl	8002364 <HAL_TIM_Base_Start_IT>

	while (!is_tim16_period_elapsed) {
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <turn_on_LD5+0x48>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4053      	eors	r3, r2
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f7      	bne.n	8000298 <turn_on_LD5+0x14>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4809      	ldr	r0, [pc, #36]	@ (80002d4 <turn_on_LD5+0x50>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	0019      	movs	r1, r3
 80002b2:	f001 f9d3 	bl	800165c <HAL_GPIO_WritePin>
	is_tim16_period_elapsed = false;
 80002b6:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <turn_on_LD5+0x48>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(&htim16);
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <turn_on_LD5+0x4c>)
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f8a2 	bl	8002408 <HAL_TIM_Base_Stop_IT>
}
 80002c4:	46c0      	nop			@ (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	200001c8 	.word	0x200001c8
 80002d0:	20000070 	.word	0x20000070
 80002d4:	48000800 	.word	0x48000800

080002d8 <turn_off_LD5>:

void turn_off_LD5(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	is_tim16_period_elapsed = false;
 80002dc:	4b13      	ldr	r3, [pc, #76]	@ (800032c <turn_off_LD5+0x54>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	4812      	ldr	r0, [pc, #72]	@ (8000330 <turn_off_LD5+0x58>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	0019      	movs	r1, r3
 80002ec:	f001 f9b6 	bl	800165c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim16);
 80002f0:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <turn_off_LD5+0x5c>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f002 f836 	bl	8002364 <HAL_TIM_Base_Start_IT>

	while (!is_tim16_period_elapsed) {
 80002f8:	46c0      	nop			@ (mov r8, r8)
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <turn_off_LD5+0x54>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2201      	movs	r2, #1
 8000302:	4053      	eors	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1f7      	bne.n	80002fa <turn_off_LD5+0x22>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800030a:	2380      	movs	r3, #128	@ 0x80
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4808      	ldr	r0, [pc, #32]	@ (8000330 <turn_off_LD5+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	0019      	movs	r1, r3
 8000314:	f001 f9a2 	bl	800165c <HAL_GPIO_WritePin>
	is_tim16_period_elapsed = false;
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <turn_off_LD5+0x54>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(&htim16);
 800031e:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <turn_off_LD5+0x5c>)
 8000320:	0018      	movs	r0, r3
 8000322:	f002 f871 	bl	8002408 <HAL_TIM_Base_Stop_IT>
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200001c8 	.word	0x200001c8
 8000330:	48000800 	.word	0x48000800
 8000334:	20000070 	.word	0x20000070

08000338 <turn_on__PWM_LD4>:

void turn_on__PWM_LD4(uint16_t *pulse) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim3);
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <turn_on__PWM_LD4+0x5c>)
 8000342:	0018      	movs	r0, r3
 8000344:	f002 f80e 	bl	8002364 <HAL_TIM_Base_Start_IT>

	while (*pulse < PWM_STOP_PULSE) {
 8000348:	e015      	b.n	8000376 <turn_on__PWM_LD4+0x3e>
		while (!is_tim3_period_elapsed) {
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <turn_on__PWM_LD4+0x60>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2201      	movs	r2, #1
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f7      	bne.n	800034c <turn_on__PWM_LD4+0x14>
		}
		(*pulse)++;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	b29a      	uxth	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	801a      	strh	r2, [r3, #0]
		TIM3->CCR3 = *pulse;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	881a      	ldrh	r2, [r3, #0]
 800036c:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <turn_on__PWM_LD4+0x64>)
 800036e:	63da      	str	r2, [r3, #60]	@ 0x3c
		is_tim3_period_elapsed = false;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <turn_on__PWM_LD4+0x60>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
	while (*pulse < PWM_STOP_PULSE) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	881a      	ldrh	r2, [r3, #0]
 800037a:	23fa      	movs	r3, #250	@ 0xfa
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	429a      	cmp	r2, r3
 8000380:	d3e3      	bcc.n	800034a <turn_on__PWM_LD4+0x12>

	}
	HAL_TIM_Base_Stop_IT(&htim3);
 8000382:	4b04      	ldr	r3, [pc, #16]	@ (8000394 <turn_on__PWM_LD4+0x5c>)
 8000384:	0018      	movs	r0, r3
 8000386:	f002 f83f 	bl	8002408 <HAL_TIM_Base_Stop_IT>
}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	20000028 	.word	0x20000028
 8000398:	200001c9 	.word	0x200001c9
 800039c:	40000400 	.word	0x40000400

080003a0 <turn_off__PWM_LD4>:

void turn_off__PWM_LD4(uint16_t *pulse) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim3);
 80003a8:	4b13      	ldr	r3, [pc, #76]	@ (80003f8 <turn_off__PWM_LD4+0x58>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 ffda 	bl	8002364 <HAL_TIM_Base_Start_IT>

	while (*pulse > PWM_START_PULSE) {
 80003b0:	e015      	b.n	80003de <turn_off__PWM_LD4+0x3e>
		while (!is_tim3_period_elapsed) {
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <turn_off__PWM_LD4+0x5c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	2201      	movs	r2, #1
 80003bc:	4053      	eors	r3, r2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1f7      	bne.n	80003b4 <turn_off__PWM_LD4+0x14>
		}

		(*pulse)--;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	801a      	strh	r2, [r3, #0]
		TIM3->CCR3 = *pulse;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	881a      	ldrh	r2, [r3, #0]
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <turn_off__PWM_LD4+0x60>)
 80003d6:	63da      	str	r2, [r3, #60]	@ 0x3c
		is_tim3_period_elapsed = false;
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <turn_off__PWM_LD4+0x5c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
	while (*pulse > PWM_START_PULSE) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1e5      	bne.n	80003b2 <turn_off__PWM_LD4+0x12>

	}
	HAL_TIM_Base_Stop_IT(&htim3);
 80003e6:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <turn_off__PWM_LD4+0x58>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 f80d 	bl	8002408 <HAL_TIM_Base_Stop_IT>
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	20000028 	.word	0x20000028
 80003fc:	200001c9 	.word	0x200001c9
 8000400:	40000400 	.word	0x40000400

08000404 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* Коэффициент заполнения, Pulse, TIM3->CCR3 */
	static uint16_t pulse = 0;

	char rx_buff[BUFF_SIZE] = { ' ', };
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2220      	movs	r2, #32
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	3304      	adds	r3, #4
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f004 fade 	bl	80049d8 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800041c:	f000 fce0 	bl	8000de0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000420:	f000 f850 	bl	80004c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000424:	f000 f9dc 	bl	80007e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000428:	f000 f9bc 	bl	80007a4 <MX_DMA_Init>
	MX_TIM16_Init();
 800042c:	f000 f942 	bl	80006b4 <MX_TIM16_Init>
	MX_TIM3_Init();
 8000430:	f000 f8aa 	bl	8000588 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000434:	f000 f986 	bl	8000744 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
//	init_uart_1();
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <main+0xa8>)
 800043a:	2108      	movs	r1, #8
 800043c:	0018      	movs	r0, r3
 800043e:	f002 f869 	bl	8002514 <HAL_TIM_PWM_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


		 receive_data_from_uart(rx_buff);
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fc19 	bl	8000c7c <receive_data_from_uart>

		 if (strcmp(rx_buff, LD5_ON) == 0) {
 800044a:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <main+0xac>)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff fe59 	bl	8000108 <strcmp>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d101      	bne.n	800045e <main+0x5a>
		 turn_on_LD5();
 800045a:	f7ff ff13 	bl	8000284 <turn_on_LD5>
		 }

		 if (strcmp(rx_buff, LD5_OFF) == 0) {
 800045e:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <main+0xb0>)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff fe4f 	bl	8000108 <strcmp>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d101      	bne.n	8000472 <main+0x6e>
		 turn_off_LD5();
 800046e:	f7ff ff33 	bl	80002d8 <turn_off_LD5>
		 }

		 if (strcmp(rx_buff, PWM_LD4_ON) == 0) {
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <main+0xb4>)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff fe45 	bl	8000108 <strcmp>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d103      	bne.n	800048a <main+0x86>
		 turn_on__PWM_LD4(&pulse);
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <main+0xb8>)
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff57 	bl	8000338 <turn_on__PWM_LD4>
		 }

		 if (strcmp(rx_buff, PWM_LD4_OFF) == 0) {
 800048a:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <main+0xbc>)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff fe39 	bl	8000108 <strcmp>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d103      	bne.n	80004a2 <main+0x9e>
		 turn_off__PWM_LD4(&pulse);
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <main+0xb8>)
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ff7f 	bl	80003a0 <turn_off__PWM_LD4>
		 }

		 transmit_data_to_uart(rx_buff);
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fc4d 	bl	8000d44 <transmit_data_to_uart>
		 receive_data_from_uart(rx_buff);
 80004aa:	e7ca      	b.n	8000442 <main+0x3e>
 80004ac:	20000028 	.word	0x20000028
 80004b0:	08004a48 	.word	0x08004a48
 80004b4:	08004a54 	.word	0x08004a54
 80004b8:	08004a60 	.word	0x08004a60
 80004bc:	200001ca 	.word	0x200001ca
 80004c0:	08004a70 	.word	0x08004a70

080004c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b099      	sub	sp, #100	@ 0x64
 80004c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ca:	242c      	movs	r4, #44	@ 0x2c
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2334      	movs	r3, #52	@ 0x34
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f004 fa7f 	bl	80049d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004da:	231c      	movs	r3, #28
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2310      	movs	r3, #16
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f004 fa77 	bl	80049d8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	231c      	movs	r3, #28
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f004 fa70 	bl	80049d8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2202      	movs	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2210      	movs	r2, #16
 800050a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2202      	movs	r2, #2
 8000510:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0212      	lsls	r2, r2, #8
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	0352      	lsls	r2, r2, #13
 8000520:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000528:	187b      	adds	r3, r7, r1
 800052a:	0018      	movs	r0, r3
 800052c:	f001 f8da 	bl	80016e4 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x74>
		Error_Handler();
 8000534:	f000 f9b8 	bl	80008a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000538:	211c      	movs	r1, #28
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fc4a 	bl	8001df0 <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xa0>
		Error_Handler();
 8000560:	f000 f9a2 	bl	80008a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000564:	003b      	movs	r3, r7
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000570:	003b      	movs	r3, r7
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fda8 	bl	80020c8 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0xbc>
		Error_Handler();
 800057c:	f000 f994 	bl	80008a8 <Error_Handler>
	}
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b019      	add	sp, #100	@ 0x64
 8000586:	bd90      	pop	{r4, r7, pc}

08000588 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	@ 0x38
 800058c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800058e:	2328      	movs	r3, #40	@ 0x28
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2310      	movs	r3, #16
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f004 fa1d 	bl	80049d8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800059e:	2320      	movs	r3, #32
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2308      	movs	r3, #8
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f004 fa15 	bl	80049d8 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	231c      	movs	r3, #28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f004 fa0e 	bl	80049d8 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80005bc:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005be:	4a3a      	ldr	r2, [pc, #232]	@ (80006a8 <MX_TIM3_Init+0x120>)
 80005c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 199;
 80005c2:	4b38      	ldr	r3, [pc, #224]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005c4:	22c7      	movs	r2, #199	@ 0xc7
 80005c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80005ce:	4b35      	ldr	r3, [pc, #212]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005d0:	4a36      	ldr	r2, [pc, #216]	@ (80006ac <MX_TIM3_Init+0x124>)
 80005d2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80005e0:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fe6e 	bl	80022c4 <HAL_TIM_Base_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0x68>
		Error_Handler();
 80005ec:	f000 f95c 	bl	80008a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	2128      	movs	r1, #40	@ 0x28
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	0152      	lsls	r2, r2, #5
 80005f8:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f002 f9f3 	bl	80029ec <HAL_TIM_ConfigClockSource>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM3_Init+0x86>
		Error_Handler();
 800060a:	f000 f94d 	bl	80008a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800060e:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 ff27 	bl	8002464 <HAL_TIM_PWM_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x96>
		Error_Handler();
 800061a:	f000 f945 	bl	80008a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	2120      	movs	r1, #32
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800062c:	187a      	adds	r2, r7, r1
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fe16 	bl	8003264 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 800063c:	f000 f934 	bl	80008a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2260      	movs	r2, #96	@ 0x60
 8000644:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 800065c:	2208      	movs	r2, #8
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f8fe 	bl	8002860 <HAL_TIM_PWM_ConfigChannel>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 8000668:	f000 f91e 	bl	80008a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_TIM3_Init+0x128>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_TIM3_Init+0x128>)
 8000672:	2102      	movs	r1, #2
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_TIM3_Init+0x128>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2202      	movs	r2, #2
 800067e:	4013      	ands	r3, r2
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2102      	movs	r1, #2
 8000688:	2010      	movs	r0, #16
 800068a:	f000 fcb9 	bl	8001000 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800068e:	2010      	movs	r0, #16
 8000690:	f000 fccb 	bl	800102a <HAL_NVIC_EnableIRQ>
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <MX_TIM3_Init+0x11c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f974 	bl	8000984 <HAL_TIM_MspPostInit>

}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b00e      	add	sp, #56	@ 0x38
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40000400 	.word	0x40000400
 80006ac:	000003e7 	.word	0x000003e7
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <MX_TIM16_Init+0x80>)
 80006be:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 47999;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <MX_TIM16_Init+0x84>)
 80006c4:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 999;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006ce:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_TIM16_Init+0x88>)
 80006d0:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 1;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_TIM16_Init+0x7c>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fdec 	bl	80022c4 <HAL_TIM_Base_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM16_Init+0x40>
		Error_Handler();
 80006f0:	f000 f8da 	bl	80008a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	__HAL_RCC_TIM16_CLK_ENABLE();
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_TIM16_Init+0x8c>)
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_TIM16_Init+0x8c>)
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	0289      	lsls	r1, r1, #10
 80006fe:	430a      	orrs	r2, r1
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_TIM16_Init+0x8c>)
 8000704:	699a      	ldr	r2, [r3, #24]
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	029b      	lsls	r3, r3, #10
 800070a:	4013      	ands	r3, r2
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2101      	movs	r1, #1
 8000714:	2015      	movs	r0, #21
 8000716:	f000 fc73 	bl	8001000 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800071a:	2015      	movs	r0, #21
 800071c:	f000 fc85 	bl	800102a <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Init(&htim16);
 8000720:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <MX_TIM16_Init+0x7c>)
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fdce 	bl	80022c4 <HAL_TIM_Base_Init>
	/* USER CODE END TIM16_Init 2 */

}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b002      	add	sp, #8
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000070 	.word	0x20000070
 8000734:	40014400 	.word	0x40014400
 8000738:	0000bb7f 	.word	0x0000bb7f
 800073c:	000003e7 	.word	0x000003e7
 8000740:	40021000 	.word	0x40021000

08000744 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */
////
	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_USART1_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_USART1_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000750:	2296      	movs	r2, #150	@ 0x96
 8000752:	0192      	lsls	r2, r2, #6
 8000754:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART1_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <MX_USART1_UART_Init+0x58>)
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fdd9 	bl	8003340 <HAL_UART_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000792:	f000 f889 	bl	80008a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
////
	/* USER CODE END USART1_Init 2 */

}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_DMA_Init+0x38>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200a      	movs	r0, #10
 80007c8:	f000 fc1a 	bl	8001000 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f000 fc2c 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40021000 	.word	0x40021000

080007e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007e6:	240c      	movs	r4, #12
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	0018      	movs	r0, r3
 80007ec:	2314      	movs	r3, #20
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f004 f8f1 	bl	80049d8 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	0289      	lsls	r1, r1, #10
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	029b      	lsls	r3, r3, #10
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	0309      	lsls	r1, r1, #12
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_GPIO_Init+0xc0>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	031b      	lsls	r3, r3, #12
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 8000834:	2200      	movs	r2, #0
 8000836:	0019      	movs	r1, r3
 8000838:	f000 ff10 	bl	800165c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2288      	movs	r2, #136	@ 0x88
 8000846:	0352      	lsls	r2, r2, #13
 8000848:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	193a      	adds	r2, r7, r4
 8000852:	2390      	movs	r3, #144	@ 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fd87 	bl	800136c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD5_Pin */
	GPIO_InitStruct.Pin = LD5_Pin;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 800087a:	187b      	adds	r3, r7, r1
 800087c:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <MX_GPIO_Init+0xc4>)
 800087e:	0019      	movs	r1, r3
 8000880:	0010      	movs	r0, r2
 8000882:	f000 fd73 	bl	800136c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2005      	movs	r0, #5
 800088c:	f000 fbb8 	bl	8001000 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000890:	2005      	movs	r0, #5
 8000892:	f000 fbca 	bl	800102a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b009      	add	sp, #36	@ 0x24
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800

080008a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	619a      	str	r2, [r3, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69da      	ldr	r2, [r3, #28]
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	0549      	lsls	r1, r1, #21
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_MspInit+0x44>)
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	4013      	ands	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <HAL_TIM_Base_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d114      	bne.n	8000938 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 8000914:	2102      	movs	r1, #2
 8000916:	430a      	orrs	r2, r1
 8000918:	61da      	str	r2, [r3, #28]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	2202      	movs	r2, #2
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2010      	movs	r0, #16
 800092c:	f000 fb68 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000930:	2010      	movs	r0, #16
 8000932:	f000 fb7a 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000936:	e01a      	b.n	800096e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <HAL_TIM_Base_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d115      	bne.n	800096e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0289      	lsls	r1, r1, #10
 800094c:	430a      	orrs	r2, r1
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_TIM_Base_MspInit+0x80>)
 8000952:	699a      	ldr	r2, [r3, #24]
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	029b      	lsls	r3, r3, #10
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2015      	movs	r0, #21
 8000964:	f000 fb4c 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000968:	2015      	movs	r0, #21
 800096a:	f000 fb5e 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40000400 	.word	0x40000400
 800097c:	40021000 	.word	0x40021000
 8000980:	40014400 	.word	0x40014400

08000984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	240c      	movs	r4, #12
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f004 f81e 	bl	80049d8 <memset>
  if(htim->Instance==TIM3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <HAL_TIM_MspPostInit+0x74>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d124      	bne.n	80009f0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_TIM_MspPostInit+0x78>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <HAL_TIM_MspPostInit+0x78>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0309      	lsls	r1, r1, #12
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_TIM_MspPostInit+0x78>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	031b      	lsls	r3, r3, #12
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2202      	movs	r2, #2
 80009d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_TIM_MspPostInit+0x7c>)
 80009e8:	0019      	movs	r1, r3
 80009ea:	0010      	movs	r0, r2
 80009ec:	f000 fcbe 	bl	800136c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b009      	add	sp, #36	@ 0x24
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	@ 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2414      	movs	r4, #20
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f003 ffde 	bl	80049d8 <memset>
  if(huart->Instance==USART1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a47      	ldr	r2, [pc, #284]	@ (8000b40 <HAL_UART_MspInit+0x13c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d000      	beq.n	8000a28 <HAL_UART_MspInit+0x24>
 8000a26:	e087      	b.n	8000b38 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b46      	ldr	r3, [pc, #280]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	4b45      	ldr	r3, [pc, #276]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	01c9      	lsls	r1, r1, #7
 8000a32:	430a      	orrs	r2, r1
 8000a34:	619a      	str	r2, [r3, #24]
 8000a36:	4b43      	ldr	r3, [pc, #268]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	01db      	lsls	r3, r3, #7
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b3f      	ldr	r3, [pc, #252]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	4b3e      	ldr	r3, [pc, #248]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	0289      	lsls	r1, r1, #10
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	4b3c      	ldr	r3, [pc, #240]	@ (8000b44 <HAL_UART_MspInit+0x140>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	2380      	movs	r3, #128	@ 0x80
 8000a58:	029b      	lsls	r3, r3, #10
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	22c0      	movs	r2, #192	@ 0xc0
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	0021      	movs	r1, r4
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	2390      	movs	r3, #144	@ 0x90
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fc6e 	bl	800136c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000a92:	4a2e      	ldr	r2, [pc, #184]	@ (8000b4c <HAL_UART_MspInit+0x148>)
 8000a94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ac0:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 face 	bl	8001064 <HAL_DMA_Init>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000acc:	f7ff feec 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000ad4:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_UART_MspInit+0x144>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000ade:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_UART_MspInit+0x150>)
 8000ae0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 faa8 	bl	8001064 <HAL_DMA_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8000b18:	f7ff fec6 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000b20:	671a      	str	r2, [r3, #112]	@ 0x70
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_UART_MspInit+0x14c>)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201b      	movs	r0, #27
 8000b2e:	f000 fa67 	bl	8001000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b32:	201b      	movs	r0, #27
 8000b34:	f000 fa79 	bl	800102a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b00b      	add	sp, #44	@ 0x2c
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	20000140 	.word	0x20000140
 8000b4c:	40020030 	.word	0x40020030
 8000b50:	20000184 	.word	0x20000184
 8000b54:	4002001c 	.word	0x4002001c

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f976 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 fd82 	bl	8001698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fb23 	bl	80011ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <DMA1_Channel2_3_IRQHandler+0x20>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fb1f 	bl	80011ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	20000184 	.word	0x20000184
 8000bbc:	20000140 	.word	0x20000140

08000bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <TIM3_IRQHandler+0x14>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f001 fd5c 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	20000028 	.word	0x20000028

08000bd8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <TIM16_IRQHandler+0x14>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fd50 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	20000070 	.word	0x20000070

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <USART1_IRQHandler+0x14>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 fcbe 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	200000b8 	.word	0x200000b8

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
uint8_t uart1_rx_cnt = 0; // Receive buffer count

volatile bool is_data_ready_to_be_read = false;
volatile bool is_rx_full_completed = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_UART_RxCpltCallback+0x28>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d105      	bne.n	8000c32 <HAL_UART_RxCpltCallback+0x1e>
		is_data_ready_to_be_read = true;
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_UART_RxCpltCallback+0x2c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		is_rx_full_completed = true;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_UART_RxCpltCallback+0x30>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
	}
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	200001cd 	.word	0x200001cd
 8000c44:	200001ce 	.word	0x200001ce

08000c48 <HAL_UART_TxCpltCallback>:

volatile bool is_tx_completed = false;
volatile bool is_tx_full_completed = false;
/* Регистр TXE пуст */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_UART_TxCpltCallback+0x28>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d105      	bne.n	8000c66 <HAL_UART_TxCpltCallback+0x1e>
		is_tx_completed = true;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_UART_TxCpltCallback+0x2c>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
		is_tx_full_completed = true;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_UART_TxCpltCallback+0x30>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
	}
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	40013800 	.word	0x40013800
 8000c74:	200001cf 	.word	0x200001cf
 8000c78:	200001d0 	.word	0x200001d0

08000c7c <receive_data_from_uart>:
	if (huart->Instance == USART1) {
		is_tx_half_completed = true;
	}
}

void receive_data_from_uart(char *rx_buff) {
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	char rx_byte = ' ';
 8000c84:	230d      	movs	r3, #13
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2220      	movs	r2, #32
 8000c8a:	701a      	strb	r2, [r3, #0]
	char cnt;
	uint8_t isDataEnd = 0;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

	memset(rx_buff, 0, strlen(rx_buff));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fa40 	bl	800011c <strlen>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 fe98 	bl	80049d8 <memset>
	uart1_rx_cnt = 0;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
	while (!isDataEnd) {
 8000cae:	e038      	b.n	8000d22 <receive_data_from_uart+0xa6>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &rx_byte, 1);
 8000cb0:	240d      	movs	r4, #13
 8000cb2:	1939      	adds	r1, r7, r4
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <receive_data_from_uart+0xc0>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 fc05 	bl	80034c8 <HAL_UART_Receive_IT>

		if (is_data_ready_to_be_read) {
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <receive_data_from_uart+0xc4>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	183a      	adds	r2, r7, r0
 8000cc8:	1839      	adds	r1, r7, r0
 8000cca:	7809      	ldrb	r1, [r1, #0]
 8000ccc:	7011      	strb	r1, [r2, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d027      	beq.n	8000d22 <receive_data_from_uart+0xa6>
			is_data_ready_to_be_read = false;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <receive_data_from_uart+0xc4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]

			rx_buff[uart1_rx_cnt++] = rx_byte; // Receive byte
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	b2d1      	uxtb	r1, r2
 8000ce0:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000ce2:	7011      	strb	r1, [r2, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	189b      	adds	r3, r3, r2
 8000cea:	193a      	adds	r2, r7, r4
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	701a      	strb	r2, [r3, #0]

			if ((rx_buff[uart1_rx_cnt - 1] == 0x0A)
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d110      	bne.n	8000d22 <receive_data_from_uart+0xa6>
					&& (rx_buff[uart1_rx_cnt - 2] == 0x0D)) { // Chars end: CR+LF
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	3b02      	subs	r3, #2
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b0d      	cmp	r3, #13
 8000d0e:	d108      	bne.n	8000d22 <receive_data_from_uart+0xa6>
				cnt = uart1_rx_cnt + '0';
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <receive_data_from_uart+0xbc>)
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	230e      	movs	r3, #14
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	3230      	adds	r2, #48	@ 0x30
 8000d1a:	701a      	strb	r2, [r3, #0]
				isDataEnd = 1;
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
	while (!isDataEnd) {
 8000d22:	230f      	movs	r3, #15
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0c1      	beq.n	8000cb0 <receive_data_from_uart+0x34>
			}
		}

	}

}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b005      	add	sp, #20
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	200001cc 	.word	0x200001cc
 8000d3c:	200000b8 	.word	0x200000b8
 8000d40:	200001cd 	.word	0x200001cd

08000d44 <transmit_data_to_uart>:
		HAL_UART_DMAStop(&huart1);
		memset(tx_buff, '\0', tx_buff_len);
	}
}

void transmit_data_to_uart(char *tx_buff) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	is_tx_completed = false;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <transmit_data_to_uart+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) tx_buff, strlen(tx_buff));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff f9e1 	bl	800011c <strlen>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <transmit_data_to_uart+0x44>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 fb40 	bl	80033e8 <HAL_UART_Transmit_IT>
	while (!is_tx_completed) {
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <transmit_data_to_uart+0x40>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	4053      	eors	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f7      	bne.n	8000d6a <transmit_data_to_uart+0x26>
	}
}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001cf 	.word	0x200001cf
 8000d88:	200000b8 	.word	0x200000b8

08000d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f7ff ff3a 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dba:	f003 fe15 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dbe:	f7ff fb21 	bl	8000404 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	200001d8 	.word	0x200001d8

08000ddc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_COMP_IRQHandler>
	...

08000de0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <HAL_Init+0x24>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_Init+0x24>)
 8000dea:	2110      	movs	r1, #16
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f809 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df6:	f7ff fd5d 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e12:	681c      	ldr	r4, [r3, #0]
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_InitTick+0x60>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	0019      	movs	r1, r3
 8000e1a:	23fa      	movs	r3, #250	@ 0xfa
 8000e1c:	0098      	lsls	r0, r3, #2
 8000e1e:	f7ff f985 	bl	800012c <__udivsi3>
 8000e22:	0003      	movs	r3, r0
 8000e24:	0019      	movs	r1, r3
 8000e26:	0020      	movs	r0, r4
 8000e28:	f7ff f980 	bl	800012c <__udivsi3>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 f90b 	bl	800104a <HAL_SYSTICK_Config>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e00f      	b.n	8000e5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d80b      	bhi.n	8000e5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	2301      	movs	r3, #1
 8000e46:	425b      	negs	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f8d8 	bl	8001000 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_InitTick+0x64>)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b003      	add	sp, #12
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	18d2      	adds	r2, r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200001d4 	.word	0x200001d4

08000e94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	200001d4 	.word	0x200001d4

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eba:	d809      	bhi.n	8000ed0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	231f      	movs	r3, #31
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_EnableIRQ+0x30>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
  }
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef0:	d828      	bhi.n	8000f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	33c0      	adds	r3, #192	@ 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	589b      	ldr	r3, [r3, r2]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	481f      	ldr	r0, [pc, #124]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	33c0      	adds	r3, #192	@ 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f42:	e031      	b.n	8000fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	400b      	ands	r3, r1
 8000f50:	3b08      	subs	r3, #8
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3306      	adds	r3, #6
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	0011      	movs	r1, r2
 8000f64:	2203      	movs	r2, #3
 8000f66:	400a      	ands	r2, r1
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	21ff      	movs	r1, #255	@ 0xff
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	43d2      	mvns	r2, r2
 8000f72:	401a      	ands	r2, r3
 8000f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	22ff      	movs	r2, #255	@ 0xff
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	2303      	movs	r3, #3
 8000f86:	4003      	ands	r3, r0
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001c      	movs	r4, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	18c3      	adds	r3, r0, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	045b      	lsls	r3, r3, #17
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d301      	bcc.n	8000fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e010      	b.n	8000ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <SysTick_Config+0x44>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	3a01      	subs	r2, #1
 8000fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	2103      	movs	r1, #3
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff ff7c 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <SysTick_Config+0x44>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <SysTick_Config+0x44>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	210f      	movs	r1, #15
 800100c:	187b      	adds	r3, r7, r1
 800100e:	1c02      	adds	r2, r0, #0
 8001010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	187b      	adds	r3, r7, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	0002      	movs	r2, r0
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ff33 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ffaf 	bl	8000fb8 <SysTick_Config>
 800105a:	0003      	movs	r3, r0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e036      	b.n	80010e8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2221      	movs	r2, #33	@ 0x21
 800107e:	2102      	movs	r1, #2
 8001080:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4a18      	ldr	r2, [pc, #96]	@ (80010f0 <HAL_DMA_Init+0x8c>)
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f932 	bl	8001334 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2221      	movs	r2, #33	@ 0x21
 80010da:	2101      	movs	r1, #1
 80010dc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	ffffc00f 	.word	0xffffc00f

080010f4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2221      	movs	r2, #33	@ 0x21
 8001100:	5c9b      	ldrb	r3, [r3, r2]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d008      	beq.n	800111a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2204      	movs	r2, #4
 800110c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e020      	b.n	800115c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	210e      	movs	r1, #14
 8001126:	438a      	bics	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	438a      	bics	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001142:	2101      	movs	r1, #1
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2221      	movs	r2, #33	@ 0x21
 800114e:	2101      	movs	r1, #1
 8001150:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	210f      	movs	r1, #15
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2221      	movs	r2, #33	@ 0x21
 8001178:	5c9b      	ldrb	r3, [r3, r2]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d006      	beq.n	800118e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2204      	movs	r2, #4
 8001184:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e028      	b.n	80011e0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	210e      	movs	r1, #14
 800119a:	438a      	bics	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011b6:	2101      	movs	r1, #1
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2221      	movs	r2, #33	@ 0x21
 80011c2:	2101      	movs	r1, #1
 80011c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	0010      	movs	r0, r2
 80011de:	4798      	blx	r3
    }
  }
  return status;
 80011e0:	230f      	movs	r3, #15
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	781b      	ldrb	r3, [r3, #0]
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	2204      	movs	r2, #4
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	d024      	beq.n	8001260 <HAL_DMA_IRQHandler+0x72>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2204      	movs	r2, #4
 800121a:	4013      	ands	r3, r2
 800121c:	d020      	beq.n	8001260 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2220      	movs	r2, #32
 8001226:	4013      	ands	r3, r2
 8001228:	d107      	bne.n	800123a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2104      	movs	r1, #4
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001242:	2104      	movs	r1, #4
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <HAL_DMA_IRQHandler+0x66>
 8001252:	e06a      	b.n	800132a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	0010      	movs	r0, r2
 800125c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800125e:	e064      	b.n	800132a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	2202      	movs	r2, #2
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	d02b      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xda>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2202      	movs	r2, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d027      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2220      	movs	r2, #32
 8001280:	4013      	ands	r3, r2
 8001282:	d10b      	bne.n	800129c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	210a      	movs	r1, #10
 8001290:	438a      	bics	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2221      	movs	r2, #33	@ 0x21
 8001298:	2101      	movs	r1, #1
 800129a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a4:	2102      	movs	r1, #2
 80012a6:	4091      	lsls	r1, r2
 80012a8:	000a      	movs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d036      	beq.n	800132a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	0010      	movs	r0, r2
 80012c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012c6:	e030      	b.n	800132a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	2208      	movs	r2, #8
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	d028      	beq.n	800132a <HAL_DMA_IRQHandler+0x13c>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2208      	movs	r2, #8
 80012dc:	4013      	ands	r3, r2
 80012de:	d024      	beq.n	800132a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	210e      	movs	r1, #14
 80012ec:	438a      	bics	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f8:	2101      	movs	r1, #1
 80012fa:	4091      	lsls	r1, r2
 80012fc:	000a      	movs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2221      	movs	r2, #33	@ 0x21
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	0010      	movs	r0, r2
 8001326:	4798      	blx	r3
    }
  }
}
 8001328:	e7ff      	b.n	800132a <HAL_DMA_IRQHandler+0x13c>
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <DMA_CalcBaseAndBitshift+0x30>)
 8001342:	4694      	mov	ip, r2
 8001344:	4463      	add	r3, ip
 8001346:	2114      	movs	r1, #20
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe feef 	bl	800012c <__udivsi3>
 800134e:	0003      	movs	r3, r0
 8001350:	009a      	lsls	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a03      	ldr	r2, [pc, #12]	@ (8001368 <DMA_CalcBaseAndBitshift+0x34>)
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	bffdfff8 	.word	0xbffdfff8
 8001368:	40020000 	.word	0x40020000

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	e155      	b.n	8001628 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <HAL_GPIO_Init+0x28>
 8001392:	e146      	b.n	8001622 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	409a      	lsls	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	43da      	mvns	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	2201      	movs	r2, #1
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	4013      	ands	r3, r2
 8001416:	2b03      	cmp	r3, #3
 8001418:	d017      	beq.n	800144a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d123      	bne.n	800149e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	58d3      	ldr	r3, [r2, r3]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2207      	movs	r2, #7
 8001468:	4013      	ands	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2107      	movs	r1, #7
 8001482:	400b      	ands	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4013      	ands	r3, r2
 80014dc:	d100      	bne.n	80014e0 <HAL_GPIO_Init+0x174>
 80014de:	e0a0      	b.n	8001622 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e0:	4b57      	ldr	r3, [pc, #348]	@ (8001640 <HAL_GPIO_Init+0x2d4>)
 80014e2:	699a      	ldr	r2, [r3, #24]
 80014e4:	4b56      	ldr	r3, [pc, #344]	@ (8001640 <HAL_GPIO_Init+0x2d4>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	4b54      	ldr	r3, [pc, #336]	@ (8001640 <HAL_GPIO_Init+0x2d4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_GPIO_Init+0x2d8>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	589b      	ldr	r3, [r3, r2]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	2390      	movs	r3, #144	@ 0x90
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	429a      	cmp	r2, r3
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x1ee>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a47      	ldr	r2, [pc, #284]	@ (8001648 <HAL_GPIO_Init+0x2dc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x1ea>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_GPIO_Init+0x2e0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x1e6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a45      	ldr	r2, [pc, #276]	@ (8001650 <HAL_GPIO_Init+0x2e4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x1e2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a44      	ldr	r2, [pc, #272]	@ (8001654 <HAL_GPIO_Init+0x2e8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x1de>
 8001546:	2304      	movs	r3, #4
 8001548:	e008      	b.n	800155c <HAL_GPIO_Init+0x1f0>
 800154a:	2305      	movs	r3, #5
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x1f0>
 800154e:	2303      	movs	r3, #3
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x1f0>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x1f0>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x1f0>
 800155a:	2300      	movs	r3, #0
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	2103      	movs	r1, #3
 8001560:	400a      	ands	r2, r1
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800156c:	4935      	ldr	r1, [pc, #212]	@ (8001644 <HAL_GPIO_Init+0x2d8>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43da      	mvns	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	035b      	lsls	r3, r3, #13
 8001592:	4013      	ands	r3, r2
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43da      	mvns	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	039b      	lsls	r3, r3, #14
 80015bc:	4013      	ands	r3, r2
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	4013      	ands	r3, r2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	40da      	lsrs	r2, r3
 8001630:	1e13      	subs	r3, r2, #0
 8001632:	d000      	beq.n	8001636 <HAL_GPIO_Init+0x2ca>
 8001634:	e6a2      	b.n	800137c <HAL_GPIO_Init+0x10>
  } 
}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b006      	add	sp, #24
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00
 8001654:	48001000 	.word	0x48001000
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	0008      	movs	r0, r1
 8001666:	0011      	movs	r1, r2
 8001668:	1cbb      	adds	r3, r7, #2
 800166a:	1c02      	adds	r2, r0, #0
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	1c7b      	adds	r3, r7, #1
 8001670:	1c0a      	adds	r2, r1, #0
 8001672:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	1c7b      	adds	r3, r7, #1
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167c:	1cbb      	adds	r3, r7, #2
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001686:	1cbb      	adds	r3, r7, #2
 8001688:	881a      	ldrh	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	1dba      	adds	r2, r7, #6
 80016aa:	8812      	ldrh	r2, [r2, #0]
 80016ac:	4013      	ands	r3, r2
 80016ae:	d008      	beq.n	80016c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016b2:	1dba      	adds	r2, r7, #6
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	1dbb      	adds	r3, r7, #6
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f807 	bl	80016d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0002      	movs	r2, r0
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f000 fb76 	bl	8001de4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_RCC_OscConfig+0x20>
 8001702:	e08e      	b.n	8001822 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001704:	4bc5      	ldr	r3, [pc, #788]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	220c      	movs	r2, #12
 800170a:	4013      	ands	r3, r2
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00e      	beq.n	800172e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001710:	4bc2      	ldr	r3, [pc, #776]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	220c      	movs	r2, #12
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d117      	bne.n	800174c <HAL_RCC_OscConfig+0x68>
 800171c:	4bbf      	ldr	r3, [pc, #764]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	23c0      	movs	r3, #192	@ 0xc0
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	401a      	ands	r2, r3
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	429a      	cmp	r2, r3
 800172c:	d10e      	bne.n	800174c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172e:	4bbb      	ldr	r3, [pc, #748]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_RCC_OscConfig+0x58>
 800173a:	e071      	b.n	8001820 <HAL_RCC_OscConfig+0x13c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d000      	beq.n	8001746 <HAL_RCC_OscConfig+0x62>
 8001744:	e06c      	b.n	8001820 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f000 fb4c 	bl	8001de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x80>
 8001754:	4bb1      	ldr	r3, [pc, #708]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4bb0      	ldr	r3, [pc, #704]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	0249      	lsls	r1, r1, #9
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e02f      	b.n	80017c4 <HAL_RCC_OscConfig+0xe0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0xa2>
 800176c:	4bab      	ldr	r3, [pc, #684]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4baa      	ldr	r3, [pc, #680]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001772:	49ab      	ldr	r1, [pc, #684]	@ (8001a20 <HAL_RCC_OscConfig+0x33c>)
 8001774:	400a      	ands	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	4ba8      	ldr	r3, [pc, #672]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4ba7      	ldr	r3, [pc, #668]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800177e:	49a9      	ldr	r1, [pc, #676]	@ (8001a24 <HAL_RCC_OscConfig+0x340>)
 8001780:	400a      	ands	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e01e      	b.n	80017c4 <HAL_RCC_OscConfig+0xe0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10e      	bne.n	80017ac <HAL_RCC_OscConfig+0xc8>
 800178e:	4ba3      	ldr	r3, [pc, #652]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4ba2      	ldr	r3, [pc, #648]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001794:	2180      	movs	r1, #128	@ 0x80
 8001796:	02c9      	lsls	r1, r1, #11
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	4b9f      	ldr	r3, [pc, #636]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b9e      	ldr	r3, [pc, #632]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017a2:	2180      	movs	r1, #128	@ 0x80
 80017a4:	0249      	lsls	r1, r1, #9
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xe0>
 80017ac:	4b9b      	ldr	r3, [pc, #620]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017b2:	499b      	ldr	r1, [pc, #620]	@ (8001a20 <HAL_RCC_OscConfig+0x33c>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b98      	ldr	r3, [pc, #608]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b97      	ldr	r3, [pc, #604]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017be:	4999      	ldr	r1, [pc, #612]	@ (8001a24 <HAL_RCC_OscConfig+0x340>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb62 	bl	8000e94 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb5d 	bl	8000e94 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	@ 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2fd      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0xf2>
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb4d 	bl	8000e94 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fb48 	bl	8000e94 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e2e8      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b82      	ldr	r3, [pc, #520]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x11c>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x14a>
 800182c:	e06c      	b.n	8001908 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	220c      	movs	r2, #12
 8001834:	4013      	ands	r3, r2
 8001836:	d00e      	beq.n	8001856 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001838:	4b78      	ldr	r3, [pc, #480]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	220c      	movs	r2, #12
 800183e:	4013      	ands	r3, r2
 8001840:	2b08      	cmp	r3, #8
 8001842:	d11f      	bne.n	8001884 <HAL_RCC_OscConfig+0x1a0>
 8001844:	4b75      	ldr	r3, [pc, #468]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	23c0      	movs	r3, #192	@ 0xc0
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	401a      	ands	r2, r3
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	429a      	cmp	r2, r3
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b71      	ldr	r3, [pc, #452]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x188>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2bb      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	22f8      	movs	r2, #248	@ 0xf8
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00da      	lsls	r2, r3, #3
 800187c:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e041      	b.n	8001908 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d024      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fafc 	bl	8000e94 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff faf7 	bl	8000e94 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e297      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d0f1      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b57      	ldr	r3, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	22f8      	movs	r2, #248	@ 0xf8
 80018c4:	4393      	bics	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00da      	lsls	r2, r3, #3
 80018ce:	4b53      	ldr	r3, [pc, #332]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e018      	b.n	8001908 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b51      	ldr	r3, [pc, #324]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b50      	ldr	r3, [pc, #320]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fad7 	bl	8000e94 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fad2 	bl	8000e94 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e272      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d1f1      	bne.n	80018ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2208      	movs	r2, #8
 800190e:	4013      	ands	r3, r2
 8001910:	d036      	beq.n	8001980 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d019      	beq.n	800194e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 800191c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800191e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fab5 	bl	8000e94 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fab0 	bl	8000e94 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e250      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f1      	beq.n	8001930 <HAL_RCC_OscConfig+0x24c>
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001952:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001954:	2101      	movs	r1, #1
 8001956:	438a      	bics	r2, r1
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fa9b 	bl	8000e94 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff fa96 	bl	8000e94 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e236      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001976:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d1f1      	bne.n	8001964 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2204      	movs	r2, #4
 8001986:	4013      	ands	r3, r2
 8001988:	d100      	bne.n	800198c <HAL_RCC_OscConfig+0x2a8>
 800198a:	e0b5      	b.n	8001af8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198c:	201f      	movs	r0, #31
 800198e:	183b      	adds	r3, r7, r0
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001994:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	055b      	lsls	r3, r3, #21
 800199c:	4013      	ands	r3, r2
 800199e:	d110      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	0549      	lsls	r1, r1, #21
 80019aa:	430a      	orrs	r2, r1
 80019ac:	61da      	str	r2, [r3, #28]
 80019ae:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	055b      	lsls	r3, r3, #21
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_RCC_OscConfig+0x344>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_RCC_OscConfig+0x344>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_RCC_OscConfig+0x344>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0049      	lsls	r1, r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fa5a 	bl	8000e94 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff fa55 	bl	8000e94 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	@ 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1f5      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_OscConfig+0x344>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10f      	bne.n	8001a2c <HAL_RCC_OscConfig+0x348>
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4b02      	ldr	r3, [pc, #8]	@ (8001a1c <HAL_RCC_OscConfig+0x338>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	e036      	b.n	8001a88 <HAL_RCC_OscConfig+0x3a4>
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	fffeffff 	.word	0xfffeffff
 8001a24:	fffbffff 	.word	0xfffbffff
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x36a>
 8001a34:	4bca      	ldr	r3, [pc, #808]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	4bc9      	ldr	r3, [pc, #804]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	621a      	str	r2, [r3, #32]
 8001a40:	4bc7      	ldr	r3, [pc, #796]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	6a1a      	ldr	r2, [r3, #32]
 8001a44:	4bc6      	ldr	r3, [pc, #792]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	2104      	movs	r1, #4
 8001a48:	438a      	bics	r2, r1
 8001a4a:	621a      	str	r2, [r3, #32]
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x3a4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x38c>
 8001a56:	4bc2      	ldr	r3, [pc, #776]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4bc1      	ldr	r3, [pc, #772]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]
 8001a62:	4bbf      	ldr	r3, [pc, #764]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4bbe      	ldr	r3, [pc, #760]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	621a      	str	r2, [r3, #32]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x3a4>
 8001a70:	4bbb      	ldr	r3, [pc, #748]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	4bba      	ldr	r3, [pc, #744]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	4bb8      	ldr	r3, [pc, #736]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4bb7      	ldr	r3, [pc, #732]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d014      	beq.n	8001aba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa00 	bl	8000e94 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	e009      	b.n	8001aae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f9fb 	bl	8000e94 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4aaf      	ldr	r2, [pc, #700]	@ (8001d64 <HAL_RCC_OscConfig+0x680>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e19a      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	4bac      	ldr	r3, [pc, #688]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3b6>
 8001ab8:	e013      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f9eb 	bl	8000e94 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f9e6 	bl	8000e94 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4aa5      	ldr	r2, [pc, #660]	@ (8001d64 <HAL_RCC_OscConfig+0x680>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e185      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	2202      	movs	r2, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b9c      	ldr	r3, [pc, #624]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001af2:	499d      	ldr	r1, [pc, #628]	@ (8001d68 <HAL_RCC_OscConfig+0x684>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2210      	movs	r2, #16
 8001afe:	4013      	ands	r3, r2
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b0a:	4b95      	ldr	r3, [pc, #596]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0e:	4b94      	ldr	r3, [pc, #592]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	2104      	movs	r1, #4
 8001b12:	430a      	orrs	r2, r1
 8001b14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b16:	4b92      	ldr	r3, [pc, #584]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1a:	4b91      	ldr	r3, [pc, #580]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f9b7 	bl	8000e94 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b2c:	f7ff f9b2 	bl	8000e94 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e152      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b3e:	4b88      	ldr	r3, [pc, #544]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f1      	beq.n	8001b2c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b48:	4b85      	ldr	r3, [pc, #532]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	22f8      	movs	r2, #248	@ 0xf8
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	4b81      	ldr	r3, [pc, #516]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5e:	e034      	b.n	8001bca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	3305      	adds	r3, #5
 8001b66:	d111      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b68:	4b7d      	ldr	r3, [pc, #500]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	2104      	movs	r1, #4
 8001b70:	438a      	bics	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b74:	4b7a      	ldr	r3, [pc, #488]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b78:	22f8      	movs	r2, #248	@ 0xf8
 8001b7a:	4393      	bics	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	00da      	lsls	r2, r3, #3
 8001b84:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8a:	e01e      	b.n	8001bca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b8c:	4b74      	ldr	r3, [pc, #464]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	430a      	orrs	r2, r1
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b98:	4b71      	ldr	r3, [pc, #452]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9c:	4b70      	ldr	r3, [pc, #448]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f976 	bl	8000e94 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bae:	f7ff f971 	bl	8000e94 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e111      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bc0:	4b67      	ldr	r3, [pc, #412]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1f1      	bne.n	8001bae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d05c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bd4:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d00e      	beq.n	8001bfe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001be0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d114      	bne.n	8001c16 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bec:	4b5c      	ldr	r3, [pc, #368]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	23c0      	movs	r3, #192	@ 0xc0
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	23c0      	movs	r3, #192	@ 0xc0
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d10b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bfe:	4b58      	ldr	r3, [pc, #352]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	4013      	ands	r3, r2
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5a8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d03c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0e6      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c1e:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c22:	4b4f      	ldr	r3, [pc, #316]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	0249      	lsls	r1, r1, #9
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f932 	bl	8000e94 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c36:	f7ff f92d 	bl	8000e94 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0cd      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c48:	4b45      	ldr	r3, [pc, #276]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x552>
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c56:	4b42      	ldr	r3, [pc, #264]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	4943      	ldr	r1, [pc, #268]	@ (8001d6c <HAL_RCC_OscConfig+0x688>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f917 	bl	8000e94 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6c:	f7ff f912 	bl	8000e94 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0b2      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	4013      	ands	r3, r2
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x588>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c8c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5b4>
 8001c96:	e0a4      	b.n	8001de2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5c2>
 8001ca4:	e078      	b.n	8001d98 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d14c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	492e      	ldr	r1, [pc, #184]	@ (8001d70 <HAL_RCC_OscConfig+0x68c>)
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff f8eb 	bl	8000e94 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f8e6 	bl	8000e94 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e086      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	049b      	lsls	r3, r3, #18
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	4393      	bics	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_RCC_OscConfig+0x690>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0449      	lsls	r1, r1, #17
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f8b9 	bl	8000e94 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff f8b4 	bl	8000e94 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e054      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x644>
 8001d46:	e04c      	b.n	8001de2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <HAL_RCC_OscConfig+0x68c>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f89e 	bl	8000e94 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x6a6>
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	00001388 	.word	0x00001388
 8001d68:	efffffff 	.word	0xefffffff
 8001d6c:	fffeffff 	.word	0xfffeffff
 8001d70:	feffffff 	.word	0xfeffffff
 8001d74:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff f88c 	bl	8000e94 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e02c      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_RCC_OscConfig+0x708>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	049b      	lsls	r3, r3, #18
 8001d92:	4013      	ands	r3, r2
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x694>
 8001d96:	e024      	b.n	8001de2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e01f      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_OscConfig+0x708>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <HAL_RCC_OscConfig+0x708>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10e      	bne.n	8001dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	23f0      	movs	r3, #240	@ 0xf0
 8001dd2:	039b      	lsls	r3, r3, #14
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b008      	add	sp, #32
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0bf      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b61      	ldr	r3, [pc, #388]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d911      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0a6      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d015      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	4013      	ands	r3, r2
 8001e48:	d006      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e4a:	4b51      	ldr	r3, [pc, #324]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e50:	21e0      	movs	r1, #224	@ 0xe0
 8001e52:	00c9      	lsls	r1, r1, #3
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	22f0      	movs	r2, #240	@ 0xf0
 8001e5e:	4393      	bics	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	d04c      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b44      	ldr	r3, [pc, #272]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	d120      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	4b3e      	ldr	r3, [pc, #248]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	049b      	lsls	r3, r3, #18
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d114      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eae:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e062      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e05b      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe ffd8 	bl	8000e94 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7fe ffd3 	bl	8000e94 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a27      	ldr	r2, [pc, #156]	@ (8001f94 <HAL_RCC_ClockConfig+0x1a4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e042      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	220c      	movs	r2, #12
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ec      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d211      	bcs.n	8001f42 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_RCC_ClockConfig+0x19c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e020      	b.n	8001f84 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2204      	movs	r2, #4
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_RCC_ClockConfig+0x1a8>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f60:	f000 f820 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_RCC_ClockConfig+0x1a0>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <HAL_RCC_ClockConfig+0x1ac>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	000a      	movs	r2, r1
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe ff43 	bl	8000e08 <HAL_InitTick>
  
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	00001388 	.word	0x00001388
 8001f98:	fffff8ff 	.word	0xfffff8ff
 8001f9c:	08004a80 	.word	0x08004a80
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d046      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0xb8>
 8001fce:	d848      	bhi.n	8002062 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d002      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x36>
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d003      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001fd8:	e043      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fdc:	613b      	str	r3, [r7, #16]
      break;
 8001fde:	e043      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	4a24      	ldr	r2, [pc, #144]	@ (800207c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	23c0      	movs	r3, #192	@ 0xc0
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	401a      	ands	r2, r3
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	025b      	lsls	r3, r3, #9
 8002008:	429a      	cmp	r2, r3
 800200a:	d109      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	481a      	ldr	r0, [pc, #104]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002010:	f7fe f88c 	bl	800012c <__udivsi3>
 8002014:	0003      	movs	r3, r0
 8002016:	001a      	movs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4353      	muls	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e01a      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	23c0      	movs	r3, #192	@ 0xc0
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	401a      	ands	r2, r3
 8002028:	23c0      	movs	r3, #192	@ 0xc0
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	429a      	cmp	r2, r3
 800202e:	d109      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	4814      	ldr	r0, [pc, #80]	@ (8002084 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002034:	f7fe f87a 	bl	800012c <__udivsi3>
 8002038:	0003      	movs	r3, r0
 800203a:	001a      	movs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4353      	muls	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e008      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002048:	f7fe f870 	bl	800012c <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	001a      	movs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4353      	muls	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e005      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_GetSysClockFreq+0xe0>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e002      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002064:	613b      	str	r3, [r7, #16]
      break;
 8002066:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002068:	693b      	ldr	r3, [r7, #16]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	08004a98 	.word	0x08004a98
 8002080:	08004aa8 	.word	0x08004aa8
 8002084:	02dc6c00 	.word	0x02dc6c00

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <HAL_RCC_GetHCLKFreq+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	20000000 	.word	0x20000000

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020a0:	f7ff fff2 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a4:	0001      	movs	r1, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	40d9      	lsrs	r1, r3
 80020b6:	000b      	movs	r3, r1
}    
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08004a90 	.word	0x08004a90

080020c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	025b      	lsls	r3, r3, #9
 80020e0:	4013      	ands	r3, r2
 80020e2:	d100      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020e4:	e08e      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2017      	movs	r0, #23
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b6e      	ldr	r3, [pc, #440]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	055b      	lsls	r3, r3, #21
 80020f6:	4013      	ands	r3, r2
 80020f8:	d110      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b6b      	ldr	r3, [pc, #428]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	4b6a      	ldr	r3, [pc, #424]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002100:	2180      	movs	r1, #128	@ 0x80
 8002102:	0549      	lsls	r1, r1, #21
 8002104:	430a      	orrs	r2, r1
 8002106:	61da      	str	r2, [r3, #28]
 8002108:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	055b      	lsls	r3, r3, #21
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	183b      	adds	r3, r7, r0
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d11a      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002128:	4b60      	ldr	r3, [pc, #384]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b5f      	ldr	r3, [pc, #380]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800212e:	2180      	movs	r1, #128	@ 0x80
 8002130:	0049      	lsls	r1, r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe fead 	bl	8000e94 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	e008      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe fea8 	bl	8000e94 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	@ 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0a6      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4013      	ands	r3, r2
 800215c:	d0f0      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800215e:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	23c0      	movs	r3, #192	@ 0xc0
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d034      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	23c0      	movs	r3, #192	@ 0xc0
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4013      	ands	r3, r2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d02c      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002180:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a4a      	ldr	r2, [pc, #296]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002190:	2180      	movs	r1, #128	@ 0x80
 8002192:	0249      	lsls	r1, r1, #9
 8002194:	430a      	orrs	r2, r1
 8002196:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800219e:	4945      	ldr	r1, [pc, #276]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021a4:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fe6f 	bl	8000e94 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe6a 	bl	8000e94 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	4a3c      	ldr	r2, [pc, #240]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e067      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021da:	4b33      	ldr	r3, [pc, #204]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a34      	ldr	r2, [pc, #208]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ee:	2317      	movs	r3, #23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021fe:	492f      	ldr	r1, [pc, #188]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002200:	400a      	ands	r2, r1
 8002202:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220e:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	2203      	movs	r2, #3
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221e:	430a      	orrs	r2, r1
 8002220:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222c:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4a23      	ldr	r2, [pc, #140]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223c:	430a      	orrs	r2, r1
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	4013      	ands	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	2210      	movs	r2, #16
 8002250:	4393      	bics	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	2280      	movs	r2, #128	@ 0x80
 8002270:	4393      	bics	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4013      	ands	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	4393      	bics	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800229a:	430a      	orrs	r2, r1
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b006      	add	sp, #24
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	fffffcff 	.word	0xfffffcff
 80022b4:	fffeffff 	.word	0xfffeffff
 80022b8:	00001388 	.word	0x00001388
 80022bc:	efffffff 	.word	0xefffffff
 80022c0:	fffcffff 	.word	0xfffcffff

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e042      	b.n	800235c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223d      	movs	r2, #61	@ 0x3d
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223c      	movs	r2, #60	@ 0x3c
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7fe fb05 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223d      	movs	r2, #61	@ 0x3d
 80022f6:	2102      	movs	r1, #2
 80022f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	0019      	movs	r1, r3
 8002304:	0010      	movs	r0, r2
 8002306:	f000 fc65 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2246      	movs	r2, #70	@ 0x46
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	223e      	movs	r2, #62	@ 0x3e
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223f      	movs	r2, #63	@ 0x3f
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	@ 0x41
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2242      	movs	r2, #66	@ 0x42
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2243      	movs	r2, #67	@ 0x43
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2244      	movs	r2, #68	@ 0x44
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2245      	movs	r2, #69	@ 0x45
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223d      	movs	r2, #61	@ 0x3d
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	223d      	movs	r2, #61	@ 0x3d
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d001      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e03b      	b.n	80023f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	223d      	movs	r2, #61	@ 0x3d
 8002380:	2102      	movs	r1, #2
 8002382:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a18      	ldr	r2, [pc, #96]	@ (80023fc <HAL_TIM_Base_Start_IT+0x98>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00f      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x5a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d009      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x5a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <HAL_TIM_Base_Start_IT+0x9c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x5a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_TIM_Base_Start_IT+0xa0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2207      	movs	r2, #7
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d010      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	e007      	b.n	80023f2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	40000400 	.word	0x40000400
 8002404:	40014000 	.word	0x40014000

08002408 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	438a      	bics	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_TIM_Base_Stop_IT+0x54>)
 8002428:	4013      	ands	r3, r2
 800242a:	d10d      	bne.n	8002448 <HAL_TIM_Base_Stop_IT+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <HAL_TIM_Base_Stop_IT+0x58>)
 8002434:	4013      	ands	r3, r2
 8002436:	d107      	bne.n	8002448 <HAL_TIM_Base_Stop_IT+0x40>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	223d      	movs	r2, #61	@ 0x3d
 800244c:	2101      	movs	r1, #1
 800244e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	00001111 	.word	0x00001111
 8002460:	00000444 	.word	0x00000444

08002464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e042      	b.n	80024fc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	223d      	movs	r2, #61	@ 0x3d
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	223c      	movs	r2, #60	@ 0x3c
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f839 	bl	8002504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223d      	movs	r2, #61	@ 0x3d
 8002496:	2102      	movs	r1, #2
 8002498:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	0019      	movs	r1, r3
 80024a4:	0010      	movs	r0, r2
 80024a6:	f000 fb95 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2246      	movs	r2, #70	@ 0x46
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223e      	movs	r2, #62	@ 0x3e
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	223f      	movs	r2, #63	@ 0x3f
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2240      	movs	r2, #64	@ 0x40
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2241      	movs	r2, #65	@ 0x41
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2242      	movs	r2, #66	@ 0x42
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2243      	movs	r2, #67	@ 0x43
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2244      	movs	r2, #68	@ 0x44
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2245      	movs	r2, #69	@ 0x45
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223d      	movs	r2, #61	@ 0x3d
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <HAL_TIM_PWM_Start+0x22>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	223e      	movs	r2, #62	@ 0x3e
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	1e5a      	subs	r2, r3, #1
 8002530:	4193      	sbcs	r3, r2
 8002532:	b2db      	uxtb	r3, r3
 8002534:	e01f      	b.n	8002576 <HAL_TIM_PWM_Start+0x62>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d108      	bne.n	800254e <HAL_TIM_PWM_Start+0x3a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223f      	movs	r2, #63	@ 0x3f
 8002540:	5c9b      	ldrb	r3, [r3, r2]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	1e5a      	subs	r2, r3, #1
 8002548:	4193      	sbcs	r3, r2
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e013      	b.n	8002576 <HAL_TIM_PWM_Start+0x62>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d108      	bne.n	8002566 <HAL_TIM_PWM_Start+0x52>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	4193      	sbcs	r3, r2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e007      	b.n	8002576 <HAL_TIM_PWM_Start+0x62>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	@ 0x41
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	4193      	sbcs	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e074      	b.n	8002668 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0x7a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223e      	movs	r2, #62	@ 0x3e
 8002588:	2102      	movs	r1, #2
 800258a:	5499      	strb	r1, [r3, r2]
 800258c:	e013      	b.n	80025b6 <HAL_TIM_PWM_Start+0xa2>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0x8a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	223f      	movs	r2, #63	@ 0x3f
 8002598:	2102      	movs	r1, #2
 800259a:	5499      	strb	r1, [r3, r2]
 800259c:	e00b      	b.n	80025b6 <HAL_TIM_PWM_Start+0xa2>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0x9a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2240      	movs	r2, #64	@ 0x40
 80025a8:	2102      	movs	r1, #2
 80025aa:	5499      	strb	r1, [r3, r2]
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_PWM_Start+0xa2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	@ 0x41
 80025b2:	2102      	movs	r1, #2
 80025b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 fe2c 	bl	800321c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a29      	ldr	r2, [pc, #164]	@ (8002670 <HAL_TIM_PWM_Start+0x15c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00e      	beq.n	80025ec <HAL_TIM_PWM_Start+0xd8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_TIM_PWM_Start+0x160>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d009      	beq.n	80025ec <HAL_TIM_PWM_Start+0xd8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <HAL_TIM_PWM_Start+0x164>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d004      	beq.n	80025ec <HAL_TIM_PWM_Start+0xd8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a25      	ldr	r2, [pc, #148]	@ (800267c <HAL_TIM_PWM_Start+0x168>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_TIM_PWM_Start+0xdc>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_PWM_Start+0xde>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	0209      	lsls	r1, r1, #8
 8002604:	430a      	orrs	r2, r1
 8002606:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	@ (8002670 <HAL_TIM_PWM_Start+0x15c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <HAL_TIM_PWM_Start+0x11e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	429a      	cmp	r2, r3
 800261c:	d009      	beq.n	8002632 <HAL_TIM_PWM_Start+0x11e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_TIM_PWM_Start+0x16c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_TIM_PWM_Start+0x11e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_TIM_PWM_Start+0x160>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2207      	movs	r2, #7
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d010      	beq.n	8002666 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	e007      	b.n	8002666 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b004      	add	sp, #16
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40014000 	.word	0x40014000
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	40000400 	.word	0x40000400

08002684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d021      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2203      	movs	r2, #3
 80026b2:	4252      	negs	r2, r2
 80026b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2203      	movs	r2, #3
 80026c4:	4013      	ands	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fa6a 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e007      	b.n	80026e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 fa5d 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fa69 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2204      	movs	r2, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d01e      	beq.n	8002736 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2205      	movs	r2, #5
 80026fe:	4252      	negs	r2, r2
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	23c0      	movs	r3, #192	@ 0xc0
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4013      	ands	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fa43 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 800271e:	e007      	b.n	8002730 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fa36 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fa42 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2208      	movs	r2, #8
 800273a:	4013      	ands	r3, r2
 800273c:	d021      	beq.n	8002782 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d01d      	beq.n	8002782 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2209      	movs	r2, #9
 800274c:	4252      	negs	r2, r2
 800274e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2203      	movs	r2, #3
 800275e:	4013      	ands	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fa1d 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 800276a:	e007      	b.n	800277c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fa10 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 fa1c 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	4013      	ands	r3, r2
 8002790:	d01e      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2211      	movs	r2, #17
 8002798:	4252      	negs	r2, r2
 800279a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2208      	movs	r2, #8
 80027a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	23c0      	movs	r3, #192	@ 0xc0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f9f6 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e007      	b.n	80027ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f9e9 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f9f5 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00c      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d008      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4252      	negs	r2, r2
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fd29 	bl	8000244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2280      	movs	r2, #128	@ 0x80
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00c      	beq.n	8002814 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2280      	movs	r2, #128	@ 0x80
 80027fe:	4013      	ands	r3, r2
 8002800:	d008      	beq.n	8002814 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2281      	movs	r2, #129	@ 0x81
 8002808:	4252      	negs	r2, r2
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fd8e 	bl	8003330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2240      	movs	r2, #64	@ 0x40
 8002818:	4013      	ands	r3, r2
 800281a:	d00c      	beq.n	8002836 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	4013      	ands	r3, r2
 8002822:	d008      	beq.n	8002836 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2241      	movs	r2, #65	@ 0x41
 800282a:	4252      	negs	r2, r2
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f9c7 	bl	8002bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2220      	movs	r2, #32
 800283a:	4013      	ands	r3, r2
 800283c:	d00c      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	4013      	ands	r3, r2
 8002844:	d008      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2221      	movs	r2, #33	@ 0x21
 800284c:	4252      	negs	r2, r2
 800284e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fd64 	bl	8003320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2317      	movs	r3, #23
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	223c      	movs	r2, #60	@ 0x3c
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x22>
 800287e:	2302      	movs	r3, #2
 8002880:	e0ad      	b.n	80029de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	223c      	movs	r2, #60	@ 0x3c
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d100      	bne.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002890:	e076      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d900      	bls.n	800289a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002898:	e095      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d04e      	beq.n	800293e <HAL_TIM_PWM_ConfigChannel+0xde>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d900      	bls.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80028a6:	e08e      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d021      	beq.n	80028f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80028b4:	e087      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 fa16 	bl	8002cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2108      	movs	r1, #8
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2104      	movs	r1, #4
 80028e0:	438a      	bics	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]
      break;
 80028f6:	e06b      	b.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f000 fa7d 	bl	8002e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2180      	movs	r1, #128	@ 0x80
 8002912:	0109      	lsls	r1, r1, #4
 8002914:	430a      	orrs	r2, r1
 8002916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4931      	ldr	r1, [pc, #196]	@ (80029e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002924:	400a      	ands	r2, r1
 8002926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	021a      	lsls	r2, r3, #8
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	619a      	str	r2, [r3, #24]
      break;
 800293c:	e048      	b.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	0011      	movs	r1, r2
 8002946:	0018      	movs	r0, r3
 8002948:	f000 fade 	bl	8002f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2108      	movs	r1, #8
 8002958:	430a      	orrs	r2, r1
 800295a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2104      	movs	r1, #4
 8002968:	438a      	bics	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69d9      	ldr	r1, [r3, #28]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	61da      	str	r2, [r3, #28]
      break;
 800297e:	e027      	b.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fb43 	bl	8003014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	0109      	lsls	r1, r1, #4
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	490f      	ldr	r1, [pc, #60]	@ (80029e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69d9      	ldr	r1, [r3, #28]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
      break;
 80029c4:	e004      	b.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80029c6:	2317      	movs	r3, #23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
      break;
 80029ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	223c      	movs	r2, #60	@ 0x3c
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

  return status;
 80029d8:	2317      	movs	r3, #23
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	781b      	ldrb	r3, [r3, #0]
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b006      	add	sp, #24
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	fffffbff 	.word	0xfffffbff

080029ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	230f      	movs	r3, #15
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223c      	movs	r2, #60	@ 0x3c
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_ConfigClockSource+0x20>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0bc      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x19a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	223c      	movs	r2, #60	@ 0x3c
 8002a10:	2101      	movs	r1, #1
 8002a12:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	223d      	movs	r2, #61	@ 0x3d
 8002a18:	2102      	movs	r1, #2
 8002a1a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2277      	movs	r2, #119	@ 0x77
 8002a28:	4393      	bics	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4a58      	ldr	r2, [pc, #352]	@ (8002b90 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	0192      	lsls	r2, r2, #6
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xde>
 8002a48:	2280      	movs	r2, #128	@ 0x80
 8002a4a:	0192      	lsls	r2, r2, #6
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d900      	bls.n	8002a52 <HAL_TIM_ConfigClockSource+0x66>
 8002a50:	e088      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a52:	2280      	movs	r2, #128	@ 0x80
 8002a54:	0152      	lsls	r2, r2, #5
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_TIM_ConfigClockSource+0x70>
 8002a5a:	e088      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x182>
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	0152      	lsls	r2, r2, #5
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d900      	bls.n	8002a66 <HAL_TIM_ConfigClockSource+0x7a>
 8002a64:	e07e      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a66:	2b70      	cmp	r3, #112	@ 0x70
 8002a68:	d018      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0xb0>
 8002a6a:	d900      	bls.n	8002a6e <HAL_TIM_ConfigClockSource+0x82>
 8002a6c:	e07a      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a6e:	2b60      	cmp	r3, #96	@ 0x60
 8002a70:	d04f      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x126>
 8002a72:	d900      	bls.n	8002a76 <HAL_TIM_ConfigClockSource+0x8a>
 8002a74:	e076      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a76:	2b50      	cmp	r3, #80	@ 0x50
 8002a78:	d03b      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x106>
 8002a7a:	d900      	bls.n	8002a7e <HAL_TIM_ConfigClockSource+0x92>
 8002a7c:	e072      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	d057      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x146>
 8002a82:	d900      	bls.n	8002a86 <HAL_TIM_ConfigClockSource+0x9a>
 8002a84:	e06e      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a86:	2b30      	cmp	r3, #48	@ 0x30
 8002a88:	d063      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x166>
 8002a8a:	d86b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d060      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x166>
 8002a90:	d868      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d05d      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x166>
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d05b      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x166>
 8002a9a:	e063      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	f000 fb96 	bl	80031dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2277      	movs	r2, #119	@ 0x77
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e052      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	f000 fb7f 	bl	80031dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	01c9      	lsls	r1, r1, #7
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
      break;
 8002af0:	e03e      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	001a      	movs	r2, r3
 8002b00:	f000 faf2 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2150      	movs	r1, #80	@ 0x50
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fb4c 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e02e      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1e:	001a      	movs	r2, r3
 8002b20:	f000 fb10 	bl	8003144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2160      	movs	r1, #96	@ 0x60
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fb3c 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002b30:	e01e      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3e:	001a      	movs	r2, r3
 8002b40:	f000 fad2 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2140      	movs	r1, #64	@ 0x40
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fb2c 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002b50:	e00e      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f000 fb23 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
      break;
 8002b6c:	e000      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b6e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	223d      	movs	r2, #61	@ 0x3d
 8002b74:	2101      	movs	r1, #1
 8002b76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	223c      	movs	r2, #60	@ 0x3c
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

  return status;
 8002b80:	230f      	movs	r3, #15
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	ffff00ff 	.word	0xffff00ff

08002b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bcc:	46c0      	nop			@ (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd4 <TIM_Base_SetConfig+0x100>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d008      	beq.n	8002bfe <TIM_Base_SetConfig+0x2a>
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x2a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a37      	ldr	r2, [pc, #220]	@ (8002cd8 <TIM_Base_SetConfig+0x104>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2270      	movs	r2, #112	@ 0x70
 8002c02:	4393      	bics	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a30      	ldr	r2, [pc, #192]	@ (8002cd4 <TIM_Base_SetConfig+0x100>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	05db      	lsls	r3, r3, #23
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd8 <TIM_Base_SetConfig+0x104>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cdc <TIM_Base_SetConfig+0x108>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce0 <TIM_Base_SetConfig+0x10c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ce4 <TIM_Base_SetConfig+0x110>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x76>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a28      	ldr	r2, [pc, #160]	@ (8002ce8 <TIM_Base_SetConfig+0x114>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	@ (8002cec <TIM_Base_SetConfig+0x118>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2280      	movs	r2, #128	@ 0x80
 8002c60:	4393      	bics	r3, r2
 8002c62:	001a      	movs	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <TIM_Base_SetConfig+0x100>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <TIM_Base_SetConfig+0xce>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <TIM_Base_SetConfig+0x10c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0xce>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <TIM_Base_SetConfig+0x110>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0xce>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <TIM_Base_SetConfig+0x114>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d103      	bne.n	8002caa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]
  }
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40002000 	.word	0x40002000
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	40014800 	.word	0x40014800
 8002cec:	fffffcff 	.word	0xfffffcff

08002cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4393      	bics	r3, r2
 8002d08:	001a      	movs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2270      	movs	r2, #112	@ 0x70
 8002d1e:	4393      	bics	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4393      	bics	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2202      	movs	r2, #2
 8002d38:	4393      	bics	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <TIM_OC1_SetConfig+0xf8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a26      	ldr	r2, [pc, #152]	@ (8002dec <TIM_OC1_SetConfig+0xfc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <TIM_OC1_SetConfig+0x100>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <TIM_OC1_SetConfig+0x104>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <TIM_OC1_SetConfig+0xf8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <TIM_OC1_SetConfig+0xfc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <TIM_OC1_SetConfig+0x100>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <TIM_OC1_SetConfig+0x104>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4a15      	ldr	r2, [pc, #84]	@ (8002df8 <TIM_OC1_SetConfig+0x108>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <TIM_OC1_SetConfig+0x10c>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800
 8002df8:	fffffeff 	.word	0xfffffeff
 8002dfc:	fffffdff 	.word	0xfffffdff

08002e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	2210      	movs	r2, #16
 8002e16:	4393      	bics	r3, r2
 8002e18:	001a      	movs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee8 <TIM_OC2_SetConfig+0xe8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <TIM_OC2_SetConfig+0xec>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	@ (8002ef0 <TIM_OC2_SetConfig+0xf0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10d      	bne.n	8002e7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	4393      	bics	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2240      	movs	r2, #64	@ 0x40
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <TIM_OC2_SetConfig+0xf0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_OC2_SetConfig+0x9e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <TIM_OC2_SetConfig+0xf4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_OC2_SetConfig+0x9e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <TIM_OC2_SetConfig+0xf8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_OC2_SetConfig+0x9e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <TIM_OC2_SetConfig+0xfc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d113      	bne.n	8002ec6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <TIM_OC2_SetConfig+0x100>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <TIM_OC2_SetConfig+0x104>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffff8fff 	.word	0xffff8fff
 8002eec:	fffffcff 	.word	0xfffffcff
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	fffffbff 	.word	0xfffffbff
 8002f04:	fffff7ff 	.word	0xfffff7ff

08002f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a33      	ldr	r2, [pc, #204]	@ (8002fec <TIM_OC3_SetConfig+0xe4>)
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2270      	movs	r2, #112	@ 0x70
 8002f34:	4393      	bics	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ff0 <TIM_OC3_SetConfig+0xe8>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a24      	ldr	r2, [pc, #144]	@ (8002ff4 <TIM_OC3_SetConfig+0xec>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10d      	bne.n	8002f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <TIM_OC3_SetConfig+0xf0>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <TIM_OC3_SetConfig+0xf4>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <TIM_OC3_SetConfig+0xec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00b      	beq.n	8002fa2 <TIM_OC3_SetConfig+0x9a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <TIM_OC3_SetConfig+0xf8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <TIM_OC3_SetConfig+0x9a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <TIM_OC3_SetConfig+0xfc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <TIM_OC3_SetConfig+0x9a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003008 <TIM_OC3_SetConfig+0x100>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	@ (800300c <TIM_OC3_SetConfig+0x104>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a18      	ldr	r2, [pc, #96]	@ (8003010 <TIM_OC3_SetConfig+0x108>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	46c0      	nop			@ (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b006      	add	sp, #24
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	fffffeff 	.word	0xfffffeff
 8002ff0:	fffffdff 	.word	0xfffffdff
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	fffff7ff 	.word	0xfffff7ff
 8002ffc:	fffffbff 	.word	0xfffffbff
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800
 800300c:	ffffefff 	.word	0xffffefff
 8003010:	ffffdfff 	.word	0xffffdfff

08003014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a26      	ldr	r2, [pc, #152]	@ (80030c4 <TIM_OC4_SetConfig+0xb0>)
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <TIM_OC4_SetConfig+0xb4>)
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a21      	ldr	r2, [pc, #132]	@ (80030cc <TIM_OC4_SetConfig+0xb8>)
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <TIM_OC4_SetConfig+0xbc>)
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	031b      	lsls	r3, r3, #12
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <TIM_OC4_SetConfig+0xc0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_OC4_SetConfig+0x78>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <TIM_OC4_SetConfig+0xc4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_OC4_SetConfig+0x78>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <TIM_OC4_SetConfig+0xc8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_OC4_SetConfig+0x78>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a16      	ldr	r2, [pc, #88]	@ (80030e0 <TIM_OC4_SetConfig+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <TIM_OC4_SetConfig+0xd0>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b006      	add	sp, #24
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	ffffefff 	.word	0xffffefff
 80030c8:	ffff8fff 	.word	0xffff8fff
 80030cc:	fffffcff 	.word	0xfffffcff
 80030d0:	ffffdfff 	.word	0xffffdfff
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	ffffbfff 	.word	0xffffbfff

080030e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	2201      	movs	r2, #1
 8003100:	4393      	bics	r3, r2
 8003102:	001a      	movs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	22f0      	movs	r2, #240	@ 0xf0
 8003112:	4393      	bics	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	220a      	movs	r2, #10
 8003124:	4393      	bics	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}

08003144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	2210      	movs	r2, #16
 800315c:	4393      	bics	r3, r2
 800315e:	001a      	movs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4a0d      	ldr	r2, [pc, #52]	@ (80031a4 <TIM_TI2_ConfigInputStage+0x60>)
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	031b      	lsls	r3, r3, #12
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	22a0      	movs	r2, #160	@ 0xa0
 8003180:	4393      	bics	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b006      	add	sp, #24
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	ffff0fff 	.word	0xffff0fff

080031a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2270      	movs	r2, #112	@ 0x70
 80031bc:	4393      	bics	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	2207      	movs	r2, #7
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <TIM_ETR_SetConfig+0x3c>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	431a      	orrs	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b006      	add	sp, #24
 8003216:	bd80      	pop	{r7, pc}
 8003218:	ffff00ff 	.word	0xffff00ff

0800321c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	221f      	movs	r2, #31
 800322c:	4013      	ands	r3, r2
 800322e:	2201      	movs	r2, #1
 8003230:	409a      	lsls	r2, r3
 8003232:	0013      	movs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	43d2      	mvns	r2, r2
 800323e:	401a      	ands	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	211f      	movs	r1, #31
 800324c:	400b      	ands	r3, r1
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4099      	lsls	r1, r3
 8003252:	000b      	movs	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b006      	add	sp, #24
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223c      	movs	r2, #60	@ 0x3c
 8003272:	5c9b      	ldrb	r3, [r3, r2]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003278:	2302      	movs	r3, #2
 800327a:	e047      	b.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	223c      	movs	r2, #60	@ 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223d      	movs	r2, #61	@ 0x3d
 8003288:	2102      	movs	r1, #2
 800328a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2270      	movs	r2, #112	@ 0x70
 80032a0:	4393      	bics	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a16      	ldr	r2, [pc, #88]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00f      	beq.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d009      	beq.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10c      	bne.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	4393      	bics	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	@ 0x3d
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223c      	movs	r2, #60	@ 0x3c
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b004      	add	sp, #16
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40014000 	.word	0x40014000

08003320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003328:	46c0      	nop			@ (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e044      	b.n	80033dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2278      	movs	r2, #120	@ 0x78
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f7fd fb4d 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2224      	movs	r2, #36	@ 0x24
 800336e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2101      	movs	r1, #1
 800337c:	438a      	bics	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fd70 	bl	8003e70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fbe4 	bl	8003b60 <UART_SetConfig>
 8003398:	0003      	movs	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e01c      	b.n	80033dc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	490d      	ldr	r1, [pc, #52]	@ (80033e4 <HAL_UART_Init+0xa4>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	212a      	movs	r1, #42	@ 0x2a
 80033be:	438a      	bics	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 fdff 	bl	8003fd8 <UART_CheckIdleState>
 80033da:	0003      	movs	r3, r0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	ffffb7ff 	.word	0xffffb7ff

080033e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d15b      	bne.n	80034b6 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_UART_Transmit_IT+0x24>
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e053      	b.n	80034b8 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	015b      	lsls	r3, r3, #5
 8003418:	429a      	cmp	r2, r3
 800341a:	d109      	bne.n	8003430 <HAL_UART_Transmit_IT+0x48>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e043      	b.n	80034b8 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1dba      	adds	r2, r7, #6
 800343a:	2150      	movs	r1, #80	@ 0x50
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1dba      	adds	r2, r7, #6
 8003444:	2152      	movs	r1, #82	@ 0x52
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2284      	movs	r2, #132	@ 0x84
 8003454:	2100      	movs	r1, #0
 8003456:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2221      	movs	r2, #33	@ 0x21
 800345c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	015b      	lsls	r3, r3, #5
 8003466:	429a      	cmp	r2, r3
 8003468:	d107      	bne.n	800347a <HAL_UART_Transmit_IT+0x92>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <HAL_UART_Transmit_IT+0xd8>)
 8003476:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003478:	e002      	b.n	8003480 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <HAL_UART_Transmit_IT+0xdc>)
 800347e:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	613b      	str	r3, [r7, #16]
  return(result);
 8003486:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b008      	add	sp, #32
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	08004545 	.word	0x08004545
 80034c4:	08004493 	.word	0x08004493

080034c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2280      	movs	r2, #128	@ 0x80
 80034da:	589b      	ldr	r3, [r3, r2]
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d145      	bne.n	800356c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_Receive_IT+0x26>
 80034e6:	1dbb      	adds	r3, r7, #6
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e03d      	b.n	800356e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d109      	bne.n	8003512 <HAL_UART_Receive_IT+0x4a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d001      	beq.n	8003512 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e02d      	b.n	800356e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	4013      	ands	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	613b      	str	r3, [r7, #16]
  return(result);
 800352c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	2301      	movs	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2180      	movs	r1, #128	@ 0x80
 8003548:	04c9      	lsls	r1, r1, #19
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 fe50 	bl	8004208 <UART_Start_Receive_IT>
 8003568:	0003      	movs	r3, r0
 800356a:	e000      	b.n	800356e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b008      	add	sp, #32
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b0ab      	sub	sp, #172	@ 0xac
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	22a4      	movs	r2, #164	@ 0xa4
 8003588:	18b9      	adds	r1, r7, r2
 800358a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	20a0      	movs	r0, #160	@ 0xa0
 8003594:	1839      	adds	r1, r7, r0
 8003596:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	219c      	movs	r1, #156	@ 0x9c
 80035a0:	1879      	adds	r1, r7, r1
 80035a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035a4:	0011      	movs	r1, r2
 80035a6:	18bb      	adds	r3, r7, r2
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a99      	ldr	r2, [pc, #612]	@ (8003810 <HAL_UART_IRQHandler+0x298>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	2298      	movs	r2, #152	@ 0x98
 80035b0:	18bc      	adds	r4, r7, r2
 80035b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80035b4:	18bb      	adds	r3, r7, r2
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d114      	bne.n	80035e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2220      	movs	r2, #32
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2220      	movs	r2, #32
 80035cc:	4013      	ands	r3, r2
 80035ce:	d00a      	beq.n	80035e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d100      	bne.n	80035da <HAL_UART_IRQHandler+0x62>
 80035d8:	e29e      	b.n	8003b18 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	0010      	movs	r0, r2
 80035e2:	4798      	blx	r3
      }
      return;
 80035e4:	e298      	b.n	8003b18 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035e6:	2398      	movs	r3, #152	@ 0x98
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d100      	bne.n	80035f2 <HAL_UART_IRQHandler+0x7a>
 80035f0:	e114      	b.n	800381c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035f2:	239c      	movs	r3, #156	@ 0x9c
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	d106      	bne.n	800360c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035fe:	23a0      	movs	r3, #160	@ 0xa0
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a83      	ldr	r2, [pc, #524]	@ (8003814 <HAL_UART_IRQHandler+0x29c>)
 8003606:	4013      	ands	r3, r2
 8003608:	d100      	bne.n	800360c <HAL_UART_IRQHandler+0x94>
 800360a:	e107      	b.n	800381c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800360c:	23a4      	movs	r3, #164	@ 0xa4
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d012      	beq.n	800363e <HAL_UART_IRQHandler+0xc6>
 8003618:	23a0      	movs	r3, #160	@ 0xa0
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4013      	ands	r3, r2
 8003624:	d00b      	beq.n	800363e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2284      	movs	r2, #132	@ 0x84
 8003632:	589b      	ldr	r3, [r3, r2]
 8003634:	2201      	movs	r2, #1
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2184      	movs	r1, #132	@ 0x84
 800363c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800363e:	23a4      	movs	r3, #164	@ 0xa4
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	d011      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
 800364a:	239c      	movs	r3, #156	@ 0x9c
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2202      	movs	r2, #2
 800365c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2284      	movs	r2, #132	@ 0x84
 8003662:	589b      	ldr	r3, [r3, r2]
 8003664:	2204      	movs	r2, #4
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2184      	movs	r1, #132	@ 0x84
 800366c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800366e:	23a4      	movs	r3, #164	@ 0xa4
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d011      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
 800367a:	239c      	movs	r3, #156	@ 0x9c
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	d00b      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2204      	movs	r2, #4
 800368c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2284      	movs	r2, #132	@ 0x84
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	2202      	movs	r2, #2
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2184      	movs	r1, #132	@ 0x84
 800369c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800369e:	23a4      	movs	r3, #164	@ 0xa4
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2208      	movs	r2, #8
 80036a6:	4013      	ands	r3, r2
 80036a8:	d017      	beq.n	80036da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036aa:	23a0      	movs	r3, #160	@ 0xa0
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2220      	movs	r2, #32
 80036b2:	4013      	ands	r3, r2
 80036b4:	d105      	bne.n	80036c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036b6:	239c      	movs	r3, #156	@ 0x9c
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2284      	movs	r2, #132	@ 0x84
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	2208      	movs	r2, #8
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2184      	movs	r1, #132	@ 0x84
 80036d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036da:	23a4      	movs	r3, #164	@ 0xa4
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_UART_IRQHandler+0x198>
 80036e8:	23a0      	movs	r3, #160	@ 0xa0
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	04db      	lsls	r3, r3, #19
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00c      	beq.n	8003710 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2284      	movs	r2, #132	@ 0x84
 8003704:	589b      	ldr	r3, [r3, r2]
 8003706:	2220      	movs	r2, #32
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2184      	movs	r1, #132	@ 0x84
 800370e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2284      	movs	r2, #132	@ 0x84
 8003714:	589b      	ldr	r3, [r3, r2]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d100      	bne.n	800371c <HAL_UART_IRQHandler+0x1a4>
 800371a:	e1ff      	b.n	8003b1c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800371c:	23a4      	movs	r3, #164	@ 0xa4
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	4013      	ands	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003728:	23a0      	movs	r3, #160	@ 0xa0
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	d008      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	0010      	movs	r0, r2
 8003744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2284      	movs	r2, #132	@ 0x84
 800374a:	589b      	ldr	r3, [r3, r2]
 800374c:	2194      	movs	r1, #148	@ 0x94
 800374e:	187a      	adds	r2, r7, r1
 8003750:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2240      	movs	r2, #64	@ 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d004      	beq.n	800376a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003760:	187b      	adds	r3, r7, r1
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2228      	movs	r2, #40	@ 0x28
 8003766:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003768:	d047      	beq.n	80037fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fe15 	bl	800439c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2240      	movs	r2, #64	@ 0x40
 800377a:	4013      	ands	r3, r2
 800377c:	2b40      	cmp	r3, #64	@ 0x40
 800377e:	d137      	bne.n	80037f0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8310 	mrs	r3, PRIMASK
 8003784:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003788:	2090      	movs	r0, #144	@ 0x90
 800378a:	183a      	adds	r2, r7, r0
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	2301      	movs	r3, #1
 8003790:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2140      	movs	r1, #64	@ 0x40
 80037a6:	438a      	bics	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	183b      	adds	r3, r7, r0
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <HAL_UART_IRQHandler+0x2a0>)
 80037c6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fcc9 	bl	8001164 <HAL_DMA_Abort_IT>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d01a      	beq.n	800380c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e0:	0018      	movs	r0, r3
 80037e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e012      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f9a5 	bl	8003b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	e00d      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f9a0 	bl	8003b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e008      	b.n	800380c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f99b 	bl	8003b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2284      	movs	r2, #132	@ 0x84
 8003806:	2100      	movs	r1, #0
 8003808:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800380a:	e187      	b.n	8003b1c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	46c0      	nop			@ (mov r8, r8)
    return;
 800380e:	e185      	b.n	8003b1c <HAL_UART_IRQHandler+0x5a4>
 8003810:	0000080f 	.word	0x0000080f
 8003814:	04000120 	.word	0x04000120
 8003818:	08004465 	.word	0x08004465

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	2b01      	cmp	r3, #1
 8003822:	d000      	beq.n	8003826 <HAL_UART_IRQHandler+0x2ae>
 8003824:	e139      	b.n	8003a9a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003826:	23a4      	movs	r3, #164	@ 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	d100      	bne.n	8003834 <HAL_UART_IRQHandler+0x2bc>
 8003832:	e132      	b.n	8003a9a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003834:	23a0      	movs	r3, #160	@ 0xa0
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2210      	movs	r2, #16
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_UART_IRQHandler+0x2ca>
 8003840:	e12b      	b.n	8003a9a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2210      	movs	r2, #16
 8003848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2240      	movs	r2, #64	@ 0x40
 8003852:	4013      	ands	r3, r2
 8003854:	2b40      	cmp	r3, #64	@ 0x40
 8003856:	d000      	beq.n	800385a <HAL_UART_IRQHandler+0x2e2>
 8003858:	e09f      	b.n	800399a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	217e      	movs	r1, #126	@ 0x7e
 8003864:	187b      	adds	r3, r7, r1
 8003866:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003868:	187b      	adds	r3, r7, r1
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <HAL_UART_IRQHandler+0x2fa>
 8003870:	e156      	b.n	8003b20 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2258      	movs	r2, #88	@ 0x58
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	187a      	adds	r2, r7, r1
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d300      	bcc.n	8003882 <HAL_UART_IRQHandler+0x30a>
 8003880:	e14e      	b.n	8003b20 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	187a      	adds	r2, r7, r1
 8003886:	215a      	movs	r1, #90	@ 0x5a
 8003888:	8812      	ldrh	r2, [r2, #0]
 800388a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b20      	cmp	r3, #32
 8003894:	d06f      	beq.n	8003976 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003896:	f3ef 8310 	mrs	r3, PRIMASK
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a0:	2301      	movs	r3, #1
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	499e      	ldr	r1, [pc, #632]	@ (8003b30 <HAL_UART_IRQHandler+0x5b8>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c8:	f3ef 8310 	mrs	r3, PRIMASK
 80038cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80038ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d2:	2301      	movs	r3, #1
 80038d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	438a      	bics	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003902:	673b      	str	r3, [r7, #112]	@ 0x70
 8003904:	2301      	movs	r3, #1
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2140      	movs	r1, #64	@ 0x40
 800391c:	438a      	bics	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003922:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2280      	movs	r2, #128	@ 0x80
 8003930:	2120      	movs	r1, #32
 8003932:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003942:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003944:	2301      	movs	r3, #1
 8003946:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2110      	movs	r1, #16
 800395c:	438a      	bics	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003970:	0018      	movs	r0, r3
 8003972:	f7fd fbbf 	bl	80010f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2258      	movs	r2, #88	@ 0x58
 8003980:	5a9a      	ldrh	r2, [r3, r2]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	215a      	movs	r1, #90	@ 0x5a
 8003986:	5a5b      	ldrh	r3, [r3, r1]
 8003988:	b29b      	uxth	r3, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f8d8 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003998:	e0c2      	b.n	8003b20 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2258      	movs	r2, #88	@ 0x58
 800399e:	5a99      	ldrh	r1, [r3, r2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	225a      	movs	r2, #90	@ 0x5a
 80039a4:	5a9b      	ldrh	r3, [r3, r2]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	208e      	movs	r0, #142	@ 0x8e
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	1a8a      	subs	r2, r1, r2
 80039ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	225a      	movs	r2, #90	@ 0x5a
 80039b4:	5a9b      	ldrh	r3, [r3, r2]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d100      	bne.n	80039be <HAL_UART_IRQHandler+0x446>
 80039bc:	e0b2      	b.n	8003b24 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d100      	bne.n	80039c8 <HAL_UART_IRQHandler+0x450>
 80039c6:	e0ad      	b.n	8003b24 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c8:	f3ef 8310 	mrs	r3, PRIMASK
 80039cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d0:	2488      	movs	r4, #136	@ 0x88
 80039d2:	193a      	adds	r2, r7, r4
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	2301      	movs	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4951      	ldr	r1, [pc, #324]	@ (8003b34 <HAL_UART_IRQHandler+0x5bc>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	193b      	adds	r3, r7, r4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a06:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a08:	2484      	movs	r4, #132	@ 0x84
 8003a0a:	193a      	adds	r2, r7, r4
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	438a      	bics	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	2480      	movs	r4, #128	@ 0x80
 8003a56:	193a      	adds	r2, r7, r4
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2110      	movs	r1, #16
 8003a72:	438a      	bics	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 f858 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a98:	e044      	b.n	8003b24 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a9a:	23a4      	movs	r3, #164	@ 0xa4
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	035b      	lsls	r3, r3, #13
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d010      	beq.n	8003aca <HAL_UART_IRQHandler+0x552>
 8003aa8:	239c      	movs	r3, #156	@ 0x9c
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	03db      	lsls	r3, r3, #15
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2280      	movs	r2, #128	@ 0x80
 8003abc:	0352      	lsls	r2, r2, #13
 8003abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 ff80 	bl	80049c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ac8:	e02f      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aca:	23a4      	movs	r3, #164	@ 0xa4
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad6:	23a0      	movs	r3, #160	@ 0xa0
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2280      	movs	r2, #128	@ 0x80
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01e      	beq.n	8003b28 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	0010      	movs	r0, r2
 8003af2:	4798      	blx	r3
    }
    return;
 8003af4:	e018      	b.n	8003b28 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003af6:	23a4      	movs	r3, #164	@ 0xa4
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2240      	movs	r2, #64	@ 0x40
 8003afe:	4013      	ands	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
 8003b02:	23a0      	movs	r3, #160	@ 0xa0
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2240      	movs	r2, #64	@ 0x40
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d00d      	beq.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 fd75 	bl	8004600 <UART_EndTransmit_IT>
    return;
 8003b16:	e008      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	e006      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	e004      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	e002      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	e000      	b.n	8003b2a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b28:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b02b      	add	sp, #172	@ 0xac
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	fffffeff 	.word	0xfffffeff
 8003b34:	fffffedf 	.word	0xfffffedf

08003b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	000a      	movs	r2, r1
 8003b52:	1cbb      	adds	r3, r7, #2
 8003b54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b68:	231e      	movs	r3, #30
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4aaf      	ldr	r2, [pc, #700]	@ (8003e4c <UART_SetConfig+0x2ec>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4aaa      	ldr	r2, [pc, #680]	@ (8003e50 <UART_SetConfig+0x2f0>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4aa1      	ldr	r2, [pc, #644]	@ (8003e54 <UART_SetConfig+0x2f4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a9d      	ldr	r2, [pc, #628]	@ (8003e58 <UART_SetConfig+0x2f8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d127      	bne.n	8003c36 <UART_SetConfig+0xd6>
 8003be6:	4b9d      	ldr	r3, [pc, #628]	@ (8003e5c <UART_SetConfig+0x2fc>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	2203      	movs	r2, #3
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d00d      	beq.n	8003c0e <UART_SetConfig+0xae>
 8003bf2:	d81b      	bhi.n	8003c2c <UART_SetConfig+0xcc>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d014      	beq.n	8003c22 <UART_SetConfig+0xc2>
 8003bf8:	d818      	bhi.n	8003c2c <UART_SetConfig+0xcc>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0xa4>
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00a      	beq.n	8003c18 <UART_SetConfig+0xb8>
 8003c02:	e013      	b.n	8003c2c <UART_SetConfig+0xcc>
 8003c04:	231f      	movs	r3, #31
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e065      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c0e:	231f      	movs	r3, #31
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e060      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c18:	231f      	movs	r3, #31
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e05b      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c22:	231f      	movs	r3, #31
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2208      	movs	r2, #8
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e056      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c2c:	231f      	movs	r3, #31
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2210      	movs	r2, #16
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e051      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a89      	ldr	r2, [pc, #548]	@ (8003e60 <UART_SetConfig+0x300>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d134      	bne.n	8003caa <UART_SetConfig+0x14a>
 8003c40:	4b86      	ldr	r3, [pc, #536]	@ (8003e5c <UART_SetConfig+0x2fc>)
 8003c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c44:	23c0      	movs	r3, #192	@ 0xc0
 8003c46:	029b      	lsls	r3, r3, #10
 8003c48:	4013      	ands	r3, r2
 8003c4a:	22c0      	movs	r2, #192	@ 0xc0
 8003c4c:	0292      	lsls	r2, r2, #10
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d017      	beq.n	8003c82 <UART_SetConfig+0x122>
 8003c52:	22c0      	movs	r2, #192	@ 0xc0
 8003c54:	0292      	lsls	r2, r2, #10
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d822      	bhi.n	8003ca0 <UART_SetConfig+0x140>
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	0292      	lsls	r2, r2, #10
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d019      	beq.n	8003c96 <UART_SetConfig+0x136>
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	0292      	lsls	r2, r2, #10
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d81a      	bhi.n	8003ca0 <UART_SetConfig+0x140>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <UART_SetConfig+0x118>
 8003c6e:	2280      	movs	r2, #128	@ 0x80
 8003c70:	0252      	lsls	r2, r2, #9
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00a      	beq.n	8003c8c <UART_SetConfig+0x12c>
 8003c76:	e013      	b.n	8003ca0 <UART_SetConfig+0x140>
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e02b      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e026      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2204      	movs	r2, #4
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e021      	b.n	8003cda <UART_SetConfig+0x17a>
 8003c96:	231f      	movs	r3, #31
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e01c      	b.n	8003cda <UART_SetConfig+0x17a>
 8003ca0:	231f      	movs	r3, #31
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e017      	b.n	8003cda <UART_SetConfig+0x17a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	@ (8003e64 <UART_SetConfig+0x304>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d104      	bne.n	8003cbe <UART_SetConfig+0x15e>
 8003cb4:	231f      	movs	r3, #31
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e00d      	b.n	8003cda <UART_SetConfig+0x17a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a69      	ldr	r2, [pc, #420]	@ (8003e68 <UART_SetConfig+0x308>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d104      	bne.n	8003cd2 <UART_SetConfig+0x172>
 8003cc8:	231f      	movs	r3, #31
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e003      	b.n	8003cda <UART_SetConfig+0x17a>
 8003cd2:	231f      	movs	r3, #31
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d15c      	bne.n	8003da0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003ce6:	231f      	movs	r3, #31
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d015      	beq.n	8003d1c <UART_SetConfig+0x1bc>
 8003cf0:	dc18      	bgt.n	8003d24 <UART_SetConfig+0x1c4>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d00d      	beq.n	8003d12 <UART_SetConfig+0x1b2>
 8003cf6:	dc15      	bgt.n	8003d24 <UART_SetConfig+0x1c4>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <UART_SetConfig+0x1a2>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d005      	beq.n	8003d0c <UART_SetConfig+0x1ac>
 8003d00:	e010      	b.n	8003d24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d02:	f7fe f9cb 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003d06:	0003      	movs	r3, r0
 8003d08:	61bb      	str	r3, [r7, #24]
        break;
 8003d0a:	e012      	b.n	8003d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b57      	ldr	r3, [pc, #348]	@ (8003e6c <UART_SetConfig+0x30c>)
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e00f      	b.n	8003d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe f947 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8003d16:	0003      	movs	r3, r0
 8003d18:	61bb      	str	r3, [r7, #24]
        break;
 8003d1a:	e00a      	b.n	8003d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	61bb      	str	r3, [r7, #24]
        break;
 8003d22:	e006      	b.n	8003d32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d28:	231e      	movs	r3, #30
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
        break;
 8003d30:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d100      	bne.n	8003d3a <UART_SetConfig+0x1da>
 8003d38:	e07a      	b.n	8003e30 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	18d2      	adds	r2, r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	f7fc f9ed 	bl	800012c <__udivsi3>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b0f      	cmp	r3, #15
 8003d5a:	d91c      	bls.n	8003d96 <UART_SetConfig+0x236>
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d217      	bcs.n	8003d96 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	200e      	movs	r0, #14
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	210f      	movs	r1, #15
 8003d70:	438a      	bics	r2, r1
 8003d72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	b299      	uxth	r1, r3
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	183a      	adds	r2, r7, r0
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	183a      	adds	r2, r7, r0
 8003d90:	8812      	ldrh	r2, [r2, #0]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	e04c      	b.n	8003e30 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d96:	231e      	movs	r3, #30
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e047      	b.n	8003e30 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da0:	231f      	movs	r3, #31
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d015      	beq.n	8003dd6 <UART_SetConfig+0x276>
 8003daa:	dc18      	bgt.n	8003dde <UART_SetConfig+0x27e>
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d00d      	beq.n	8003dcc <UART_SetConfig+0x26c>
 8003db0:	dc15      	bgt.n	8003dde <UART_SetConfig+0x27e>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x25c>
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d005      	beq.n	8003dc6 <UART_SetConfig+0x266>
 8003dba:	e010      	b.n	8003dde <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe f96e 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e012      	b.n	8003dec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc6:	4b29      	ldr	r3, [pc, #164]	@ (8003e6c <UART_SetConfig+0x30c>)
 8003dc8:	61bb      	str	r3, [r7, #24]
        break;
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dcc:	f7fe f8ea 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e00a      	b.n	8003dec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e006      	b.n	8003dec <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de2:	231e      	movs	r3, #30
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
        break;
 8003dea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01e      	beq.n	8003e30 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085a      	lsrs	r2, r3, #1
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	18d2      	adds	r2, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0019      	movs	r1, r3
 8003e02:	0010      	movs	r0, r2
 8003e04:	f7fc f992 	bl	800012c <__udivsi3>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d90a      	bls.n	8003e28 <UART_SetConfig+0x2c8>
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d205      	bcs.n	8003e28 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	e003      	b.n	8003e30 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e28:	231e      	movs	r3, #30
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e3c:	231e      	movs	r3, #30
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b008      	add	sp, #32
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	efff69f3 	.word	0xefff69f3
 8003e50:	ffffcfff 	.word	0xffffcfff
 8003e54:	fffff4ff 	.word	0xfffff4ff
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40004800 	.word	0x40004800
 8003e68:	40004c00 	.word	0x40004c00
 8003e6c:	007a1200 	.word	0x007a1200

08003e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb4 <UART_AdvFeatureConfig+0x144>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a43      	ldr	r2, [pc, #268]	@ (8003fb8 <UART_AdvFeatureConfig+0x148>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8003fbc <UART_AdvFeatureConfig+0x14c>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <UART_AdvFeatureConfig+0x150>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2210      	movs	r2, #16
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <UART_AdvFeatureConfig+0x154>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	2220      	movs	r2, #32
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <UART_AdvFeatureConfig+0x158>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	2240      	movs	r2, #64	@ 0x40
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <UART_AdvFeatureConfig+0x15c>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	035b      	lsls	r3, r3, #13
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d10b      	bne.n	8003f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a15      	ldr	r2, [pc, #84]	@ (8003fd0 <UART_AdvFeatureConfig+0x160>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	2280      	movs	r2, #128	@ 0x80
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <UART_AdvFeatureConfig+0x164>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	46c0      	nop			@ (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	ffff7fff 	.word	0xffff7fff
 8003fb8:	fffdffff 	.word	0xfffdffff
 8003fbc:	fffeffff 	.word	0xfffeffff
 8003fc0:	fffbffff 	.word	0xfffbffff
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	ffffdfff 	.word	0xffffdfff
 8003fcc:	ffefffff 	.word	0xffefffff
 8003fd0:	ff9fffff 	.word	0xff9fffff
 8003fd4:	fff7ffff 	.word	0xfff7ffff

08003fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b092      	sub	sp, #72	@ 0x48
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2284      	movs	r2, #132	@ 0x84
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fe8:	f7fc ff54 	bl	8000e94 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d12c      	bne.n	8004058 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004000:	2280      	movs	r2, #128	@ 0x80
 8004002:	0391      	lsls	r1, r2, #14
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4a46      	ldr	r2, [pc, #280]	@ (8004120 <UART_CheckIdleState+0x148>)
 8004008:	9200      	str	r2, [sp, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	f000 f88c 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d021      	beq.n	8004058 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004014:	f3ef 8310 	mrs	r3, PRIMASK
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800401c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800401e:	2301      	movs	r3, #1
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2180      	movs	r1, #128	@ 0x80
 8004036:	438a      	bics	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	f383 8810 	msr	PRIMASK, r3
}
 8004044:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2278      	movs	r2, #120	@ 0x78
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05f      	b.n	8004118 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	4013      	ands	r3, r2
 8004062:	2b04      	cmp	r3, #4
 8004064:	d146      	bne.n	80040f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004068:	2280      	movs	r2, #128	@ 0x80
 800406a:	03d1      	lsls	r1, r2, #15
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <UART_CheckIdleState+0x148>)
 8004070:	9200      	str	r2, [sp, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	f000 f858 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d03b      	beq.n	80040f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	60fb      	str	r3, [r7, #12]
  return(result);
 8004082:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
 8004086:	2301      	movs	r3, #1
 8004088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4921      	ldr	r1, [pc, #132]	@ (8004124 <UART_CheckIdleState+0x14c>)
 800409e:	400a      	ands	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80040b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b8:	2301      	movs	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	438a      	bics	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2280      	movs	r2, #128	@ 0x80
 80040e4:	2120      	movs	r1, #32
 80040e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2278      	movs	r2, #120	@ 0x78
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e011      	b.n	8004118 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2280      	movs	r2, #128	@ 0x80
 80040fe:	2120      	movs	r1, #32
 8004100:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2278      	movs	r2, #120	@ 0x78
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b010      	add	sp, #64	@ 0x40
 800411e:	bd80      	pop	{r7, pc}
 8004120:	01ffffff 	.word	0x01ffffff
 8004124:	fffffedf 	.word	0xfffffedf

08004128 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004138:	e051      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	3301      	adds	r3, #1
 800413e:	d04e      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004140:	f7fc fea8 	bl	8000e94 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e051      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	4013      	ands	r3, r2
 8004164:	d03b      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b80      	cmp	r3, #128	@ 0x80
 800416a:	d038      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d035      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2208      	movs	r2, #8
 800417a:	4013      	ands	r3, r2
 800417c:	2b08      	cmp	r3, #8
 800417e:	d111      	bne.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2208      	movs	r2, #8
 8004186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f906 	bl	800439c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2284      	movs	r2, #132	@ 0x84
 8004194:	2108      	movs	r1, #8
 8004196:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2278      	movs	r2, #120	@ 0x78
 800419c:	2100      	movs	r1, #0
 800419e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e02c      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	401a      	ands	r2, r3
 80041b0:	2380      	movs	r3, #128	@ 0x80
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d112      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2280      	movs	r2, #128	@ 0x80
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f8e9 	bl	800439c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2284      	movs	r2, #132	@ 0x84
 80041ce:	2120      	movs	r1, #32
 80041d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2278      	movs	r2, #120	@ 0x78
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e00f      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	425a      	negs	r2, r3
 80041ee:	4153      	adcs	r3, r2
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	001a      	movs	r2, r3
 80041f4:	1dfb      	adds	r3, r7, #7
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d09e      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b090      	sub	sp, #64	@ 0x40
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	1dbb      	adds	r3, r7, #6
 8004214:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1dba      	adds	r2, r7, #6
 8004220:	2158      	movs	r1, #88	@ 0x58
 8004222:	8812      	ldrh	r2, [r2, #0]
 8004224:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1dba      	adds	r2, r7, #6
 800422a:	215a      	movs	r1, #90	@ 0x5a
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	015b      	lsls	r3, r3, #5
 800423e:	429a      	cmp	r2, r3
 8004240:	d10d      	bne.n	800425e <UART_Start_Receive_IT+0x56>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <UART_Start_Receive_IT+0x4c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	225c      	movs	r2, #92	@ 0x5c
 800424e:	4950      	ldr	r1, [pc, #320]	@ (8004390 <UART_Start_Receive_IT+0x188>)
 8004250:	5299      	strh	r1, [r3, r2]
 8004252:	e02e      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	225c      	movs	r2, #92	@ 0x5c
 8004258:	21ff      	movs	r1, #255	@ 0xff
 800425a:	5299      	strh	r1, [r3, r2]
 800425c:	e029      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10d      	bne.n	8004282 <UART_Start_Receive_IT+0x7a>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <UART_Start_Receive_IT+0x70>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	225c      	movs	r2, #92	@ 0x5c
 8004272:	21ff      	movs	r1, #255	@ 0xff
 8004274:	5299      	strh	r1, [r3, r2]
 8004276:	e01c      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	225c      	movs	r2, #92	@ 0x5c
 800427c:	217f      	movs	r1, #127	@ 0x7f
 800427e:	5299      	strh	r1, [r3, r2]
 8004280:	e017      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	055b      	lsls	r3, r3, #21
 800428a:	429a      	cmp	r2, r3
 800428c:	d10d      	bne.n	80042aa <UART_Start_Receive_IT+0xa2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <UART_Start_Receive_IT+0x98>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	225c      	movs	r2, #92	@ 0x5c
 800429a:	217f      	movs	r1, #127	@ 0x7f
 800429c:	5299      	strh	r1, [r3, r2]
 800429e:	e008      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	225c      	movs	r2, #92	@ 0x5c
 80042a4:	213f      	movs	r1, #63	@ 0x3f
 80042a6:	5299      	strh	r1, [r3, r2]
 80042a8:	e003      	b.n	80042b2 <UART_Start_Receive_IT+0xaa>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	225c      	movs	r2, #92	@ 0x5c
 80042ae:	2100      	movs	r1, #0
 80042b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2284      	movs	r2, #132	@ 0x84
 80042b6:	2100      	movs	r1, #0
 80042b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2280      	movs	r2, #128	@ 0x80
 80042be:	2122      	movs	r1, #34	@ 0x22
 80042c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c2:	f3ef 8310 	mrs	r3, PRIMASK
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	2301      	movs	r3, #1
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d2:	f383 8810 	msr	PRIMASK, r3
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	f383 8810 	msr	PRIMASK, r3
}
 80042f2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	2380      	movs	r3, #128	@ 0x80
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d107      	bne.n	8004310 <UART_Start_Receive_IT+0x108>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <UART_Start_Receive_IT+0x18c>)
 800430c:	669a      	str	r2, [r3, #104]	@ 0x68
 800430e:	e002      	b.n	8004316 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a21      	ldr	r2, [pc, #132]	@ (8004398 <UART_Start_Receive_IT+0x190>)
 8004314:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d019      	beq.n	8004352 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431e:	f3ef 8310 	mrs	r3, PRIMASK
 8004322:	61fb      	str	r3, [r7, #28]
  return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004326:	637b      	str	r3, [r7, #52]	@ 0x34
 8004328:	2301      	movs	r3, #1
 800432a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2190      	movs	r1, #144	@ 0x90
 8004340:	0049      	lsls	r1, r1, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	e018      	b.n	8004384 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	613b      	str	r3, [r7, #16]
  return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2120      	movs	r1, #32
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b010      	add	sp, #64	@ 0x40
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	000001ff 	.word	0x000001ff
 8004394:	08004811 	.word	0x08004811
 8004398:	08004659 	.word	0x08004659

0800439c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	@ 0x38
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a4:	f3ef 8310 	mrs	r3, PRIMASK
 80043a8:	617b      	str	r3, [r7, #20]
  return(result);
 80043aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4926      	ldr	r1, [pc, #152]	@ (8004460 <UART_EndRxTransfer+0xc4>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	623b      	str	r3, [r7, #32]
  return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	438a      	bics	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	2b01      	cmp	r3, #1
 800440e:	d118      	bne.n	8004442 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004410:	f3ef 8310 	mrs	r3, PRIMASK
 8004414:	60bb      	str	r3, [r7, #8]
  return(result);
 8004416:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441a:	2301      	movs	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2110      	movs	r1, #16
 8004432:	438a      	bics	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b00e      	add	sp, #56	@ 0x38
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	fffffedf 	.word	0xfffffedf

08004464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	225a      	movs	r2, #90	@ 0x5a
 8004476:	2100      	movs	r1, #0
 8004478:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2252      	movs	r2, #82	@ 0x52
 800447e:	2100      	movs	r1, #0
 8004480:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fb57 	bl	8003b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	@ 0x28
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800449e:	2b21      	cmp	r3, #33	@ 0x21
 80044a0:	d14c      	bne.n	800453c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2252      	movs	r2, #82	@ 0x52
 80044a6:	5a9b      	ldrh	r3, [r3, r2]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d132      	bne.n	8004514 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b8:	2301      	movs	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	438a      	bics	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e0:	f3ef 8310 	mrs	r3, PRIMASK
 80044e4:	617b      	str	r3, [r7, #20]
  return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	2301      	movs	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2140      	movs	r1, #64	@ 0x40
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f383 8810 	msr	PRIMASK, r3
}
 8004510:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004512:	e013      	b.n	800453c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2252      	movs	r2, #82	@ 0x52
 800452e:	5a9b      	ldrh	r3, [r3, r2]
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b299      	uxth	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2252      	movs	r2, #82	@ 0x52
 800453a:	5299      	strh	r1, [r3, r2]
}
 800453c:	46c0      	nop			@ (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b00a      	add	sp, #40	@ 0x28
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08c      	sub	sp, #48	@ 0x30
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004550:	2b21      	cmp	r3, #33	@ 0x21
 8004552:	d151      	bne.n	80045f8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2252      	movs	r2, #82	@ 0x52
 8004558:	5a9b      	ldrh	r3, [r3, r2]
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d132      	bne.n	80045c6 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	60fb      	str	r3, [r7, #12]
  return(result);
 8004566:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456a:	2301      	movs	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f383 8810 	msr	PRIMASK, r3
}
 8004574:	46c0      	nop			@ (mov r8, r8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	438a      	bics	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	61bb      	str	r3, [r7, #24]
  return(result);
 8004598:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
 800459c:	2301      	movs	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2140      	movs	r1, #64	@ 0x40
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80045c4:	e018      	b.n	80045f8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ce:	881a      	ldrh	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	05d2      	lsls	r2, r2, #23
 80045d6:	0dd2      	lsrs	r2, r2, #23
 80045d8:	b292      	uxth	r2, r2
 80045da:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2252      	movs	r2, #82	@ 0x52
 80045ea:	5a9b      	ldrh	r3, [r3, r2]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b299      	uxth	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2252      	movs	r2, #82	@ 0x52
 80045f6:	5299      	strh	r1, [r3, r2]
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b00c      	add	sp, #48	@ 0x30
 80045fe:	bd80      	pop	{r7, pc}

08004600 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004608:	f3ef 8310 	mrs	r3, PRIMASK
 800460c:	60bb      	str	r3, [r7, #8]
  return(result);
 800460e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	2301      	movs	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2140      	movs	r1, #64	@ 0x40
 800462a:	438a      	bics	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f7fc fafd 	bl	8000c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b006      	add	sp, #24
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b094      	sub	sp, #80	@ 0x50
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004660:	204e      	movs	r0, #78	@ 0x4e
 8004662:	183b      	adds	r3, r7, r0
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	215c      	movs	r1, #92	@ 0x5c
 8004668:	5a52      	ldrh	r2, [r2, r1]
 800466a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2280      	movs	r2, #128	@ 0x80
 8004670:	589b      	ldr	r3, [r3, r2]
 8004672:	2b22      	cmp	r3, #34	@ 0x22
 8004674:	d000      	beq.n	8004678 <UART_RxISR_8BIT+0x20>
 8004676:	e0ba      	b.n	80047ee <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	214c      	movs	r1, #76	@ 0x4c
 800467e:	187b      	adds	r3, r7, r1
 8004680:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004682:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004684:	187b      	adds	r3, r7, r1
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	183b      	adds	r3, r7, r0
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b2d9      	uxtb	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	400a      	ands	r2, r1
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	225a      	movs	r2, #90	@ 0x5a
 80046a8:	5a9b      	ldrh	r3, [r3, r2]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b299      	uxth	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	225a      	movs	r2, #90	@ 0x5a
 80046b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	225a      	movs	r2, #90	@ 0x5a
 80046ba:	5a9b      	ldrh	r3, [r3, r2]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d000      	beq.n	80046c4 <UART_RxISR_8BIT+0x6c>
 80046c2:	e09c      	b.n	80047fe <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ce:	2301      	movs	r3, #1
 80046d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4948      	ldr	r1, [pc, #288]	@ (8004808 <UART_RxISR_8BIT+0x1b0>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004700:	2301      	movs	r3, #1
 8004702:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	438a      	bics	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	f383 8810 	msr	PRIMASK, r3
}
 8004726:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	2120      	movs	r1, #32
 800472e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	4013      	ands	r3, r2
 8004748:	d018      	beq.n	800477c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474a:	f3ef 8310 	mrs	r3, PRIMASK
 800474e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004750:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004752:	643b      	str	r3, [r7, #64]	@ 0x40
 8004754:	2301      	movs	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4928      	ldr	r1, [pc, #160]	@ (800480c <UART_RxISR_8BIT+0x1b4>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004772:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f383 8810 	msr	PRIMASK, r3
}
 800477a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004780:	2b01      	cmp	r3, #1
 8004782:	d12f      	bne.n	80047e4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004790:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004794:	2301      	movs	r3, #1
 8004796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2110      	movs	r1, #16
 80047ac:	438a      	bics	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f383 8810 	msr	PRIMASK, r3
}
 80047ba:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	2210      	movs	r2, #16
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d103      	bne.n	80047d2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2210      	movs	r2, #16
 80047d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2258      	movs	r2, #88	@ 0x58
 80047d6:	5a9a      	ldrh	r2, [r3, r2]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	0011      	movs	r1, r2
 80047dc:	0018      	movs	r0, r3
 80047de:	f7ff f9b3 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047e2:	e00c      	b.n	80047fe <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7fc fa14 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 80047ec:	e007      	b.n	80047fe <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2108      	movs	r1, #8
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b014      	add	sp, #80	@ 0x50
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	fffffedf 	.word	0xfffffedf
 800480c:	fbffffff 	.word	0xfbffffff

08004810 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b094      	sub	sp, #80	@ 0x50
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004818:	204e      	movs	r0, #78	@ 0x4e
 800481a:	183b      	adds	r3, r7, r0
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	215c      	movs	r1, #92	@ 0x5c
 8004820:	5a52      	ldrh	r2, [r2, r1]
 8004822:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2280      	movs	r2, #128	@ 0x80
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	2b22      	cmp	r3, #34	@ 0x22
 800482c:	d000      	beq.n	8004830 <UART_RxISR_16BIT+0x20>
 800482e:	e0ba      	b.n	80049a6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	214c      	movs	r1, #76	@ 0x4c
 8004836:	187b      	adds	r3, r7, r1
 8004838:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800483a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004842:	187b      	adds	r3, r7, r1
 8004844:	183a      	adds	r2, r7, r0
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	8812      	ldrh	r2, [r2, #0]
 800484a:	4013      	ands	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	225a      	movs	r2, #90	@ 0x5a
 8004860:	5a9b      	ldrh	r3, [r3, r2]
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b299      	uxth	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	225a      	movs	r2, #90	@ 0x5a
 800486c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	225a      	movs	r2, #90	@ 0x5a
 8004872:	5a9b      	ldrh	r3, [r3, r2]
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d000      	beq.n	800487c <UART_RxISR_16BIT+0x6c>
 800487a:	e09c      	b.n	80049b6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487c:	f3ef 8310 	mrs	r3, PRIMASK
 8004880:	623b      	str	r3, [r7, #32]
  return(result);
 8004882:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
 8004886:	2301      	movs	r3, #1
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	f383 8810 	msr	PRIMASK, r3
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4948      	ldr	r1, [pc, #288]	@ (80049c0 <UART_RxISR_16BIT+0x1b0>)
 800489e:	400a      	ands	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8310 	mrs	r3, PRIMASK
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b8:	2301      	movs	r3, #1
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	438a      	bics	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2280      	movs	r2, #128	@ 0x80
 80048e4:	2120      	movs	r1, #32
 80048e6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	d018      	beq.n	8004934 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004902:	f3ef 8310 	mrs	r3, PRIMASK
 8004906:	617b      	str	r3, [r7, #20]
  return(result);
 8004908:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800490a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800490c:	2301      	movs	r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4928      	ldr	r1, [pc, #160]	@ (80049c4 <UART_RxISR_16BIT+0x1b4>)
 8004924:	400a      	ands	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	2b01      	cmp	r3, #1
 800493a:	d12f      	bne.n	800499c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	60bb      	str	r3, [r7, #8]
  return(result);
 8004948:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800494c:	2301      	movs	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2110      	movs	r1, #16
 8004964:	438a      	bics	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2210      	movs	r2, #16
 800497c:	4013      	ands	r3, r2
 800497e:	2b10      	cmp	r3, #16
 8004980:	d103      	bne.n	800498a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2210      	movs	r2, #16
 8004988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2258      	movs	r2, #88	@ 0x58
 800498e:	5a9a      	ldrh	r2, [r3, r2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0011      	movs	r1, r2
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff f8d7 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800499a:	e00c      	b.n	80049b6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fc f938 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 80049a4:	e007      	b.n	80049b6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2108      	movs	r1, #8
 80049b2:	430a      	orrs	r2, r1
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b014      	add	sp, #80	@ 0x50
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	fffffedf 	.word	0xfffffedf
 80049c4:	fbffffff 	.word	0xfbffffff

080049c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <memset>:
 80049d8:	0003      	movs	r3, r0
 80049da:	1882      	adds	r2, r0, r2
 80049dc:	4293      	cmp	r3, r2
 80049de:	d100      	bne.n	80049e2 <memset+0xa>
 80049e0:	4770      	bx	lr
 80049e2:	7019      	strb	r1, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	e7f9      	b.n	80049dc <memset+0x4>

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	2600      	movs	r6, #0
 80049ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004a20 <__libc_init_array+0x38>)
 80049ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004a24 <__libc_init_array+0x3c>)
 80049f0:	1b64      	subs	r4, r4, r5
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	2600      	movs	r6, #0
 80049fa:	f000 f819 	bl	8004a30 <_init>
 80049fe:	4c0a      	ldr	r4, [pc, #40]	@ (8004a28 <__libc_init_array+0x40>)
 8004a00:	4d0a      	ldr	r5, [pc, #40]	@ (8004a2c <__libc_init_array+0x44>)
 8004a02:	1b64      	subs	r4, r4, r5
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	00b3      	lsls	r3, r6, #2
 8004a0e:	58eb      	ldr	r3, [r5, r3]
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	00b3      	lsls	r3, r6, #2
 8004a18:	58eb      	ldr	r3, [r5, r3]
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	08004ab8 	.word	0x08004ab8
 8004a24:	08004ab8 	.word	0x08004ab8
 8004a28:	08004abc 	.word	0x08004abc
 8004a2c:	08004ab8 	.word	0x08004ab8

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
